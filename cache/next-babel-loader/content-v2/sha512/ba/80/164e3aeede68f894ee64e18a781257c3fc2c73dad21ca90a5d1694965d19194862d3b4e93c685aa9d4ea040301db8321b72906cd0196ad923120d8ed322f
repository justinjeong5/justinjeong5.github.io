{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/justinjeong/Github/javascript/githubIo/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/justinjeong/Github/javascript/githubIo/client/components/Blog/Editor/QuillEditor.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { message as Message } from 'antd';\nimport { FileImageOutlined, FileAddOutlined, VideoCameraAddOutlined } from '@ant-design/icons';\nimport { UPLOAD_BLOG_DATASET_REQUEST, RESET_UPLOAD_BLOG_DATASET } from '../../../reducers/types';\n\nconst ReactQuill = require('react-quill');\n\nconst {\n  Quill\n} = ReactQuill; // const __ISMSIE__ = navigator.userAgent.match(/Trident/i) ? true : false;\n\nif (Quill) {\n  const QuillClipboard = Quill.import('modules/clipboard');\n\n  class Clipboard extends QuillClipboard {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"getMetaTagElements\", stringContent => {\n        const el = document.createElement('div');\n        el.innerHTML = stringContent;\n        return el.getElementsByTagName('meta');\n      });\n    }\n\n    async onPaste(e) {\n      let clipboardData = e.clipboardData || window.clipboardData;\n      let pastedData = await clipboardData.getData('Text');\n      const urlMatches = pastedData.match(/\\b(http|https)?:\\/\\/\\S+/gi) || [];\n\n      if (urlMatches.length > 0) {\n        e.preventDefault();\n        urlMatches.forEach(link => {\n          axios.get(link).then(payload => {\n            // let title, image, url, description;\n            let title, image, url;\n\n            for (let node of this.getMetaTagElements(payload)) {\n              if (node.getAttribute(\"property\") === \"og:title\") {\n                title = node.getAttribute(\"content\");\n              }\n\n              if (node.getAttribute(\"property\") === \"og:image\") {\n                image = node.getAttribute(\"content\");\n              }\n\n              if (node.getAttribute(\"property\") === \"og:url\") {\n                url = node.getAttribute(\"content\");\n              } // if (node.getAttribute(\"property\") === \"og:description\") {\n              //     description = node.getAttribute(\"content\");\n              // }\n\n            }\n\n            const rendered = `<a href=${url} target=\"_blank\"><div><img src=${image} alt=${title} width=\"20%\"/><span>${title}</span></div></a>`;\n            let range = this.quill.getSelection();\n            let position = range ? range.index : 0;\n            this.quill.pasteHTML(position, rendered, 'silent');\n            this.quill.setSelection(position + rendered.length);\n          }).catch(error => console.error(error));\n        });\n      } else {\n        //console.log('when to use this') 보통 다른 곳에서  paste 한다음에  copy하면 이쪽 걸로 한다. \n        super.onPaste(e);\n      }\n    }\n\n  }\n\n  Quill.register('modules/clipboard', Clipboard, true);\n  const BlockEmbed = Quill.import('blots/block/embed');\n\n  class ImageBlot extends BlockEmbed {\n    static create(value) {\n      const imgTag = super.create();\n      imgTag.setAttribute('src', value.src);\n      imgTag.setAttribute('alt', value.title);\n      imgTag.setAttribute('style', 'width: 70%; max-width: 400px;');\n      return imgTag;\n    }\n\n    static value(node) {\n      return {\n        src: node.getAttribute('src'),\n        title: node.getAttribute('alt')\n      };\n    }\n\n  }\n\n  ImageBlot.blotName = 'image';\n  ImageBlot.tagName = 'img';\n  Quill.register(ImageBlot);\n\n  class VideoBlot extends BlockEmbed {\n    static create(value) {\n      if (value && value.src) {\n        const videoTag = super.create();\n        videoTag.setAttribute('src', value.src);\n        videoTag.setAttribute('title', value.title);\n        videoTag.setAttribute('style', 'width: 70%; max-width: 400px;');\n        videoTag.setAttribute('controls', '');\n        return videoTag;\n      } else {\n        const iframeTag = document.createElement('iframe');\n        iframeTag.setAttribute('src', value);\n        iframeTag.setAttribute('frameborder', '0');\n        iframeTag.setAttribute('allowfullscreen', true);\n        iframeTag.setAttribute('style', 'width: 70%; max-width: 400px;');\n        return iframeTag;\n      }\n    }\n\n    static value(node) {\n      if (node.getAttribute('title')) {\n        return {\n          src: node.getAttribute('src'),\n          title: node.getAttribute('title')\n        };\n      } else {\n        return node.getAttribute('src');\n      }\n    }\n\n  }\n\n  VideoBlot.blotName = 'video';\n  VideoBlot.tagName = 'video';\n  Quill.register(VideoBlot);\n\n  class FileBlot extends BlockEmbed {\n    static create(value) {\n      const prefixTag = document.createElement('span');\n      prefixTag.innerText = \"첨부파일 - \";\n      const bTag = document.createElement('b'); //위에 첨부파일 글자 옆에  파일 이름이 b 태그를 사용해서 나온다.\n\n      bTag.innerText = value.title;\n      const linkTag = document.createElement('a');\n      linkTag.setAttribute('href', value.src);\n      linkTag.setAttribute(\"target\", \"_blank\");\n      linkTag.setAttribute(\"className\", \"file-link-inner-post\");\n      linkTag.appendChild(bTag); //linkTag 이런식으로 나온다 <a href=\"btn_editPic@3x.png\" target=\"_blank\" classname=\"file-link-inner-post\"><b>btn_editPic@3x.png</b></a>\n\n      const node = super.create();\n      node.appendChild(prefixTag);\n      node.appendChild(linkTag);\n      return node;\n    }\n\n    static value(node) {\n      return {\n        src: node.querySelector('a').getAttribute('href'),\n        title: node.querySelector('b').innerText\n      };\n    }\n\n  }\n\n  FileBlot.blotName = 'file';\n  FileBlot.tagName = 'p';\n  FileBlot.className = 'file-inner-post';\n  Quill.register(FileBlot);\n\n  class PollBlot extends BlockEmbed {\n    static create(value) {\n      const prefixTag = document.createElement('span');\n      prefixTag.innerText = \"투표 - \";\n      const bTag = document.createElement('b');\n      bTag.innerText = value.title;\n      const node = super.create();\n      node.setAttribute('id', value.id);\n      node.appendChild(prefixTag);\n      node.appendChild(bTag);\n      return node;\n    }\n\n    static value(node) {\n      const id = node.getAttribute('id');\n      const bTag = node.querySelector('b');\n      const title = bTag.innerText;\n      return {\n        id,\n        title\n      };\n    }\n\n  }\n\n  PollBlot.blotName = 'poll';\n  PollBlot.tagName = 'p';\n  PollBlot.className = 'poll-inner-post';\n  Quill.register(PollBlot);\n}\n\nclass QuillEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"bandId\", void 0);\n\n    _defineProperty(this, \"placeholder\", void 0);\n\n    _defineProperty(this, \"onEditorChange\", void 0);\n\n    _defineProperty(this, \"onFilesChange\", void 0);\n\n    _defineProperty(this, \"onPollsChange\", void 0);\n\n    _defineProperty(this, \"handleChange\", html => {\n      // console.log('html', html)\n      // https://youtu.be/BbR-QCoKngE\n      // https://www.youtube.com/embed/ZwKhufmMxko\n      // https://tv.naver.com/v/9176888\n      // renderToStaticMarkup(ReactHtmlParser(html, options));\n      this.setState({\n        editorHtml: html\n      }, () => {\n        this.props.onEditorChange(this.state.editorHtml);\n      });\n    });\n\n    _defineProperty(this, \"imageHandler\", () => {\n      this.inputOpenImageRef.current.click();\n    });\n\n    _defineProperty(this, \"videoHandler\", () => {\n      this.inputOpenVideoRef.current.click();\n    });\n\n    _defineProperty(this, \"fileHandler\", () => {\n      this.inputOpenFileRef.current.click();\n    });\n\n    _defineProperty(this, \"insertImage\", e => {\n      var _e$currentTarget$file;\n\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (e.currentTarget && ((_e$currentTarget$file = e.currentTarget.files) === null || _e$currentTarget$file === void 0 ? void 0 : _e$currentTarget$file.length) > 0) {\n        const file = e.currentTarget.files[0];\n        let formData = new FormData();\n        formData.append(\"file\", file);\n        const config = {\n          header: {\n            'Content-Type': 'multipart/form-data'\n          }\n        };\n        this.props.dispatchDataset({\n          formData,\n          config,\n          dataType: 'image',\n          file\n        });\n      }\n    });\n\n    _defineProperty(this, \"insertVideo\", e => {\n      var _e$currentTarget$file2;\n\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (e.currentTarget && ((_e$currentTarget$file2 = e.currentTarget.files) === null || _e$currentTarget$file2 === void 0 ? void 0 : _e$currentTarget$file2.length) > 0) {\n        const file = e.currentTarget.files[0];\n        let formData = new FormData();\n        formData.append(\"file\", file);\n        const config = {\n          header: {\n            'Content-Type': 'multipart/form-data'\n          }\n        };\n        this.props.dispatchDataset({\n          formData,\n          config,\n          dataType: 'video',\n          file\n        });\n      }\n    });\n\n    _defineProperty(this, \"insertFile\", e => {\n      var _e$currentTarget$file3;\n\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (e.currentTarget && ((_e$currentTarget$file3 = e.currentTarget.files) === null || _e$currentTarget$file3 === void 0 ? void 0 : _e$currentTarget$file3.length) > 0) {\n        const file = e.currentTarget.files[0];\n        let formData = new FormData();\n        formData.append(\"file\", file);\n        const config = {\n          header: {\n            'Content-Type': 'multipart/form-data'\n          }\n        };\n        this.props.dispatchDataset({\n          formData,\n          config,\n          dataType: 'file',\n          file\n        });\n      }\n    });\n\n    _defineProperty(this, \"modules\", {\n      // syntax: true,\n      toolbar: {\n        container: \"#toolbar\",\n        //id =\"toorbar\"는  그 위에 B I U S I V F P 이거 있는 곳이다. \n        handlers: {\n          insertImage: this.imageHandler,\n          insertVideo: this.videoHandler,\n          insertFile: this.fileHandler,\n          insertPoll: this.pollHandler\n        }\n      }\n    });\n\n    _defineProperty(this, \"formats\", ['header', 'bold', 'italic', 'underline', 'strike', 'image', 'video', 'file', 'link', \"code-block\", \"video\", \"blockquote\", \"clean\"]);\n\n    this.state = {\n      editorHtml: \"<p>&nbsp;</p>\"\n    };\n    this.reactQuillRef = null;\n    this.inputOpenImageRef = /*#__PURE__*/React.createRef();\n    this.inputOpenVideoRef = /*#__PURE__*/React.createRef();\n    this.inputOpenFileRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.props.blog.uploadBlogDatasetError) {\n      Message.error('파일을 업로드 하는 과정에서 문제가 발생했습니다.');\n    }\n\n    if (this.props.blog.uploadBlogDatasetDone) {\n      const quill = this.reactQuillRef.getEditor();\n      quill.focus();\n      let range = quill.getSelection();\n      let position = range ? range.index : 0;\n      quill.insertEmbed(position, this.props.blog.uploadDataset.dataType, {\n        src: this.props.blog.uploadDataset.url,\n        title: this.props.blog.uploadDataset.fileName\n      });\n      quill.setSelection(position + 1);\n      this.props.dispatchResetDataset();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"toolbar\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"ql-header\",\n          defaultValue: \"\",\n          onChange: e => e.persist(),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-italic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-underline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-strike\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-insertImage\",\n          children: /*#__PURE__*/_jsxDEV(FileImageOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-insertVideo\",\n          children: /*#__PURE__*/_jsxDEV(VideoCameraAddOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-insertFile\",\n          children: /*#__PURE__*/_jsxDEV(FileAddOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-code-block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-blockquote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ql-clean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        ref: el => {\n          this.reactQuillRef = el;\n        },\n        theme: 'snow',\n        onChange: this.handleChange,\n        modules: this.modules,\n        formats: this.formats,\n        value: this.state.editorHtml,\n        placeholder: this.props.placeholder,\n        style: {\n          height: 'calc(100vh - 358px)',\n          overflowY: 'hidden'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        ref: this.inputOpenImageRef,\n        hidden: true,\n        onChange: this.insertImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"video/*\",\n        ref: this.inputOpenVideoRef,\n        hidden: true,\n        onChange: this.insertVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"*\",\n        ref: this.inputOpenFileRef,\n        hidden: true,\n        onChange: this.insertFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  blog: state.blog\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchDataset: payload => dispatch({\n    type: UPLOAD_BLOG_DATASET_REQUEST,\n    payload\n  }),\n  dispatchResetDataset: () => dispatch({\n    type: RESET_UPLOAD_BLOG_DATASET\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuillEditor);","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/components/Blog/Editor/QuillEditor.js"],"names":["React","connect","axios","message","Message","FileImageOutlined","FileAddOutlined","VideoCameraAddOutlined","UPLOAD_BLOG_DATASET_REQUEST","RESET_UPLOAD_BLOG_DATASET","ReactQuill","require","Quill","QuillClipboard","import","Clipboard","stringContent","el","document","createElement","innerHTML","getElementsByTagName","onPaste","e","clipboardData","window","pastedData","getData","urlMatches","match","length","preventDefault","forEach","link","get","then","payload","title","image","url","node","getMetaTagElements","getAttribute","rendered","range","quill","getSelection","position","index","pasteHTML","setSelection","catch","error","console","register","BlockEmbed","ImageBlot","create","value","imgTag","setAttribute","src","blotName","tagName","VideoBlot","videoTag","iframeTag","FileBlot","prefixTag","innerText","bTag","linkTag","appendChild","querySelector","className","PollBlot","id","QuillEditor","Component","constructor","props","html","setState","editorHtml","onEditorChange","state","inputOpenImageRef","current","click","inputOpenVideoRef","inputOpenFileRef","stopPropagation","currentTarget","files","file","formData","FormData","append","config","header","dispatchDataset","dataType","toolbar","container","handlers","insertImage","imageHandler","insertVideo","videoHandler","insertFile","fileHandler","insertPoll","pollHandler","reactQuillRef","createRef","componentDidUpdate","blog","uploadBlogDatasetError","uploadBlogDatasetDone","getEditor","focus","insertEmbed","uploadDataset","fileName","dispatchResetDataset","render","persist","handleChange","modules","formats","placeholder","height","overflowY","mapStateToProps","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport { message as Message } from 'antd'\nimport { FileImageOutlined, FileAddOutlined, VideoCameraAddOutlined } from '@ant-design/icons'\nimport { UPLOAD_BLOG_DATASET_REQUEST, RESET_UPLOAD_BLOG_DATASET } from '../../../reducers/types'\n\nconst ReactQuill = require('react-quill')\nconst { Quill } = ReactQuill;\n\n// const __ISMSIE__ = navigator.userAgent.match(/Trident/i) ? true : false;\n\nif (Quill) {\n  const QuillClipboard = Quill.import('modules/clipboard');\n\n  class Clipboard extends QuillClipboard {\n\n    getMetaTagElements = (stringContent) => {\n      const el = document.createElement('div');\n      el.innerHTML = stringContent;\n      return el.getElementsByTagName('meta');\n    };\n\n    async onPaste(e) {\n      let clipboardData = e.clipboardData || window.clipboardData;\n      let pastedData = await clipboardData.getData('Text');\n\n      const urlMatches = pastedData.match(/\\b(http|https)?:\\/\\/\\S+/gi) || [];\n      if (urlMatches.length > 0) {\n        e.preventDefault();\n        urlMatches.forEach(link => {\n          axios.get(link)\n            .then(payload => {\n              // let title, image, url, description;\n              let title, image, url;\n              for (let node of this.getMetaTagElements(payload)) {\n                if (node.getAttribute(\"property\") === \"og:title\") {\n                  title = node.getAttribute(\"content\");\n                }\n                if (node.getAttribute(\"property\") === \"og:image\") {\n                  image = node.getAttribute(\"content\");\n                }\n                if (node.getAttribute(\"property\") === \"og:url\") {\n                  url = node.getAttribute(\"content\");\n                }\n                // if (node.getAttribute(\"property\") === \"og:description\") {\n                //     description = node.getAttribute(\"content\");\n                // }\n              }\n\n              const rendered = `<a href=${url} target=\"_blank\"><div><img src=${image} alt=${title} width=\"20%\"/><span>${title}</span></div></a>`;\n\n              let range = this.quill.getSelection();\n              let position = range ? range.index : 0;\n              this.quill.pasteHTML(position, rendered, 'silent');\n              this.quill.setSelection(position + rendered.length);\n            })\n            .catch(error => console.error(error));\n        });\n\n      } else {\n        //console.log('when to use this') 보통 다른 곳에서  paste 한다음에  copy하면 이쪽 걸로 한다. \n        super.onPaste(e);\n      }\n    }\n\n  }\n  Quill.register('modules/clipboard', Clipboard, true);\n\n  const BlockEmbed = Quill.import('blots/block/embed');\n\n  class ImageBlot extends BlockEmbed {\n\n    static create(value) {\n      const imgTag = super.create();\n      imgTag.setAttribute('src', value.src);\n      imgTag.setAttribute('alt', value.title);\n      imgTag.setAttribute('style', 'width: 70%; max-width: 400px;');\n      return imgTag;\n    }\n\n    static value(node) {\n      return { src: node.getAttribute('src'), title: node.getAttribute('alt') };\n    }\n\n  }\n\n  ImageBlot.blotName = 'image';\n  ImageBlot.tagName = 'img';\n  Quill.register(ImageBlot);\n\n  class VideoBlot extends BlockEmbed {\n\n    static create(value) {\n      if (value && value.src) {\n        const videoTag = super.create();\n        videoTag.setAttribute('src', value.src);\n        videoTag.setAttribute('title', value.title);\n        videoTag.setAttribute('style', 'width: 70%; max-width: 400px;');\n        videoTag.setAttribute('controls', '');\n\n        return videoTag;\n      } else {\n        const iframeTag = document.createElement('iframe');\n        iframeTag.setAttribute('src', value);\n        iframeTag.setAttribute('frameborder', '0');\n        iframeTag.setAttribute('allowfullscreen', true);\n        iframeTag.setAttribute('style', 'width: 70%; max-width: 400px;');\n        return iframeTag;\n      }\n    }\n\n    static value(node) {\n      if (node.getAttribute('title')) {\n        return { src: node.getAttribute('src'), title: node.getAttribute('title') };\n      } else {\n        return node.getAttribute('src');\n      }\n    }\n\n  }\n\n  VideoBlot.blotName = 'video';\n  VideoBlot.tagName = 'video';\n  Quill.register(VideoBlot);\n\n  class FileBlot extends BlockEmbed {\n\n    static create(value) {\n      const prefixTag = document.createElement('span');\n      prefixTag.innerText = \"첨부파일 - \";\n\n      const bTag = document.createElement('b');\n      //위에 첨부파일 글자 옆에  파일 이름이 b 태그를 사용해서 나온다.\n      bTag.innerText = value.title;\n\n      const linkTag = document.createElement('a');\n      linkTag.setAttribute('href', value.src);\n      linkTag.setAttribute(\"target\", \"_blank\");\n      linkTag.setAttribute(\"className\", \"file-link-inner-post\");\n      linkTag.appendChild(bTag);\n      //linkTag 이런식으로 나온다 <a href=\"btn_editPic@3x.png\" target=\"_blank\" classname=\"file-link-inner-post\"><b>btn_editPic@3x.png</b></a>\n\n      const node = super.create();\n      node.appendChild(prefixTag);\n      node.appendChild(linkTag);\n\n      return node;\n\n    }\n\n    static value(node) {\n      return { src: node.querySelector('a').getAttribute('href'), title: node.querySelector('b').innerText };\n    }\n\n  }\n\n  FileBlot.blotName = 'file';\n  FileBlot.tagName = 'p';\n  FileBlot.className = 'file-inner-post';\n  Quill.register(FileBlot);\n\n  class PollBlot extends BlockEmbed {\n\n    static create(value) {\n      const prefixTag = document.createElement('span');\n      prefixTag.innerText = \"투표 - \";\n\n      const bTag = document.createElement('b');\n      bTag.innerText = value.title;\n\n      const node = super.create();\n      node.setAttribute('id', value.id);\n      node.appendChild(prefixTag);\n      node.appendChild(bTag);\n\n      return node;\n    }\n\n    static value(node) {\n      const id = node.getAttribute('id');\n      const bTag = node.querySelector('b');\n      const title = bTag.innerText;\n      return { id, title };\n    }\n\n  }\n\n  PollBlot.blotName = 'poll';\n  PollBlot.tagName = 'p';\n  PollBlot.className = 'poll-inner-post';\n  Quill.register(PollBlot);\n}\n\nclass QuillEditor extends React.Component {\n\n  bandId;\n  placeholder;\n  onEditorChange;\n  onFilesChange;\n  onPollsChange;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorHtml: \"<p>&nbsp;</p>\",\n    };\n\n    this.reactQuillRef = null;\n\n    this.inputOpenImageRef = React.createRef();\n    this.inputOpenVideoRef = React.createRef();\n    this.inputOpenFileRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.props.blog.uploadBlogDatasetError) {\n      Message.error('파일을 업로드 하는 과정에서 문제가 발생했습니다.')\n    }\n\n    if (this.props.blog.uploadBlogDatasetDone) {\n      const quill = this.reactQuillRef.getEditor();\n      quill.focus();\n\n      let range = quill.getSelection();\n      let position = range ? range.index : 0;\n      quill.insertEmbed(position, this.props.blog.uploadDataset.dataType, {\n        src: this.props.blog.uploadDataset.url,\n        title: this.props.blog.uploadDataset.fileName\n      });\n      quill.setSelection(position + 1);\n\n      this.props.dispatchResetDataset();\n    }\n  }\n\n  handleChange = (html) => {\n    // console.log('html', html)\n    // https://youtu.be/BbR-QCoKngE\n    // https://www.youtube.com/embed/ZwKhufmMxko\n    // https://tv.naver.com/v/9176888\n    // renderToStaticMarkup(ReactHtmlParser(html, options));\n\n    this.setState({\n      editorHtml: html\n    }, () => {\n      this.props.onEditorChange(this.state.editorHtml);\n    });\n  };\n\n  // I V F P들을  눌렀을떄 insertImage: this.imageHandler로 가서  거기서 inputOpenImageRef를 클릭 시킨다. \n  imageHandler = () => {\n    this.inputOpenImageRef.current.click();\n  };\n\n  videoHandler = () => {\n    this.inputOpenVideoRef.current.click();\n  };\n\n  fileHandler = () => {\n    this.inputOpenFileRef.current.click();\n  };\n\n\n  insertImage = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (e.currentTarget && e.currentTarget.files?.length > 0) {\n      const file = e.currentTarget.files[0];\n      let formData = new FormData();\n      formData.append(\"file\", file);\n\n      const config = {\n        header: { 'Content-Type': 'multipart/form-data' },\n      }\n\n      this.props.dispatchDataset({ formData, config, dataType: 'image', file })\n    }\n  };\n\n  insertVideo = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (e.currentTarget && e.currentTarget.files?.length > 0) {\n      const file = e.currentTarget.files[0];\n\n      let formData = new FormData();\n      formData.append(\"file\", file);\n\n      const config = {\n        header: { 'Content-Type': 'multipart/form-data' }\n      }\n\n      this.props.dispatchDataset({ formData, config, dataType: 'video', file })\n    }\n  }\n\n  insertFile = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (e.currentTarget && e.currentTarget.files?.length > 0) {\n      const file = e.currentTarget.files[0];\n\n      let formData = new FormData();\n      formData.append(\"file\", file);\n\n      const config = {\n        header: { 'Content-Type': 'multipart/form-data' }\n      }\n\n      this.props.dispatchDataset({ formData, config, dataType: 'file', file })\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"toolbar\">\n          <select className=\"ql-header\" defaultValue={\"\"} onChange={e => e.persist()}>\n            <option value=\"1\" />\n            <option value=\"2\" />\n            <option value=\"\" />\n          </select>\n          <button className=\"ql-bold\" />\n          <button className=\"ql-italic\" />\n          <button className=\"ql-underline\" />\n          <button className=\"ql-strike\" />\n          <button className=\"ql-insertImage\">\n            <FileImageOutlined />\n          </button>\n          <button className=\"ql-insertVideo\">\n            <VideoCameraAddOutlined />\n          </button>\n          <button className=\"ql-insertFile\">\n            <FileAddOutlined />\n          </button>\n          <button className=\"ql-link\" />\n          <button className=\"ql-code-block\" />\n          <button className=\"ql-video\" />\n          <button className=\"ql-blockquote\" />\n          <button className=\"ql-clean\" />\n        </div>\n        <ReactQuill\n          ref={(el) => { this.reactQuillRef = el }}\n          theme={'snow'}\n          onChange={this.handleChange}\n          modules={this.modules}\n          formats={this.formats}\n          value={this.state.editorHtml}\n          placeholder={this.props.placeholder}\n          style={{ height: 'calc(100vh - 358px)', overflowY: 'hidden' }}\n        />\n        <input type=\"file\" accept=\"image/*\" ref={this.inputOpenImageRef} hidden onChange={this.insertImage} />\n        <input type=\"file\" accept=\"video/*\" ref={this.inputOpenVideoRef} hidden onChange={this.insertVideo} />\n        <input type=\"file\" accept=\"*\" ref={this.inputOpenFileRef} hidden onChange={this.insertFile} />\n      </div>\n    )\n  }\n\n  modules = {\n    // syntax: true,\n    toolbar: {\n      container: \"#toolbar\",\n      //id =\"toorbar\"는  그 위에 B I U S I V F P 이거 있는 곳이다. \n      handlers: {\n        insertImage: this.imageHandler,\n        insertVideo: this.videoHandler,\n        insertFile: this.fileHandler,\n        insertPoll: this.pollHandler,\n      }\n    },\n\n  };\n\n  formats = [\n    'header',\n    'bold', 'italic', 'underline', 'strike',\n    'image', 'video', 'file', 'link', \"code-block\", \"video\", \"blockquote\", \"clean\"\n  ];\n}\n\nconst mapStateToProps = (state) => ({\n  blog: state.blog,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchDataset: (payload) => dispatch({\n    type: UPLOAD_BLOG_DATASET_REQUEST,\n    payload\n  }),\n  dispatchResetDataset: () => dispatch({\n    type: RESET_UPLOAD_BLOG_DATASET,\n  })\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuillEditor);"]},"metadata":{},"sourceType":"module"}