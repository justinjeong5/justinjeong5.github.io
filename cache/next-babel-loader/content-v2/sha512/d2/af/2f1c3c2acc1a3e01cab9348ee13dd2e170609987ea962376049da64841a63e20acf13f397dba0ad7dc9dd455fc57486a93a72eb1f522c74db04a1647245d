{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button, Avatar, Card } from 'antd';\nimport { POST_COMMENT_REQUEST } from '../../../reducers/types';\n\nfunction CommentForm(props) {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const {\n    currentUser\n  } = useSelector(state => state.user);\n\n  const onFinish = value => {\n    const payload = _objectSpread({\n      content: value.content,\n      writer: currentUser.userId\n    }, props.payload);\n\n    if (props.responseTo) {\n      payload.responseTo = props.responseTo;\n    }\n\n    dispatch({\n      type: POST_COMMENT_REQUEST,\n      payload\n    });\n    form.resetFields();\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      display: 'flex',\n      marginTop: 20,\n      marginBottom: -30\n    },\n    children: [/*#__PURE__*/_jsx(Card.Meta, {\n      avatar: /*#__PURE__*/_jsx(Avatar, {\n        src: currentUser.image,\n        style: {\n          marginTop: 10\n        }\n      }),\n      title: /*#__PURE__*/_jsx(\"span\", {\n        style: {\n          fontSize: 14\n        },\n        children: currentUser.name\n      }),\n      description: /*#__PURE__*/_jsx(\"span\", {\n        children: currentUser.email\n      }),\n      style: {\n        marginRight: 15\n      }\n    }), /*#__PURE__*/_jsxs(Form, {\n      form: form,\n      onFinish: onFinish,\n      style: {\n        width: '70%'\n      },\n      children: [/*#__PURE__*/_jsx(Form.Item, {\n        name: \"content\",\n        rules: [{\n          required: true,\n          message: '내용을 입력해주세요.'\n        }],\n        children: /*#__PURE__*/_jsx(Input.TextArea, {\n          disabled: props.disabled,\n          placeholder: props.disabled ? '로그인해주세요.' : props.placeholder\n        })\n      }), /*#__PURE__*/_jsx(Form.Item, {\n        children: /*#__PURE__*/_jsx(Button, {\n          disabled: props.disabled,\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: props.description\n        })\n      })]\n    })]\n  });\n}\n\nexport default CommentForm;","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/components/utils/Comment/CommentForm.js"],"names":["React","useDispatch","useSelector","Form","Input","Button","Avatar","Card","POST_COMMENT_REQUEST","CommentForm","props","dispatch","form","useForm","currentUser","state","user","onFinish","value","payload","content","writer","userId","responseTo","type","resetFields","display","marginTop","marginBottom","image","fontSize","name","email","marginRight","width","required","message","disabled","placeholder","description"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,IAAtC,QAAkD,MAAlD;AACA,SAASC,oBAAT,QAAqC,yBAArC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAE1B,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,IAAD,IAAST,IAAI,CAACU,OAAL,EAAf;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAnC;;AAEA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,UAAMC,OAAO;AACXC,MAAAA,OAAO,EAAEF,KAAK,CAACE,OADJ;AAEXC,MAAAA,MAAM,EAAEP,WAAW,CAACQ;AAFT,OAGRZ,KAAK,CAACS,OAHE,CAAb;;AAKA,QAAIT,KAAK,CAACa,UAAV,EAAsB;AACpBJ,MAAAA,OAAO,CAACI,UAAR,GAAqBb,KAAK,CAACa,UAA3B;AACD;;AACDZ,IAAAA,QAAQ,CAAC;AACPa,MAAAA,IAAI,EAAEhB,oBADC;AAEPW,MAAAA;AAFO,KAAD,CAAR;AAIAP,IAAAA,IAAI,CAACa,WAAL;AACD,GAdD;;AAgBA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,SAAS,EAAE,EAA9B;AAAkCC,MAAAA,YAAY,EAAE,CAAC;AAAjD,KAAZ;AAAA,4BACE,KAAC,IAAD,CAAM,IAAN;AACE,MAAA,MAAM,eAAE,KAAC,MAAD;AAAQ,QAAA,GAAG,EAAEd,WAAW,CAACe,KAAzB;AAAgC,QAAA,KAAK,EAAE;AAAEF,UAAAA,SAAS,EAAE;AAAb;AAAvC,QADV;AAEE,MAAA,KAAK,eAAE;AAAM,QAAA,KAAK,EAAE;AAAEG,UAAAA,QAAQ,EAAE;AAAZ,SAAb;AAAA,kBAAgChB,WAAW,CAACiB;AAA5C,QAFT;AAGE,MAAA,WAAW,eAAE;AAAA,kBAAQjB,WAAW,CAACkB;AAApB,QAHf;AAIE,MAAA,KAAK,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf;AAJT,MADF,eAOE,MAAC,IAAD;AACE,MAAA,IAAI,EAAErB,IADR;AAEE,MAAA,QAAQ,EAAEK,QAFZ;AAGE,MAAA,KAAK,EAAE;AAAEiB,QAAAA,KAAK,EAAE;AAAT,OAHT;AAAA,8BAKE,KAAC,IAAD,CAAM,IAAN;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,QAAQ,EAAE,IAAZ;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAAD,CAFT;AAAA,+BAIE,KAAC,KAAD,CAAO,QAAP;AAAgB,UAAA,QAAQ,EAAE1B,KAAK,CAAC2B,QAAhC;AAA0C,UAAA,WAAW,EAAE3B,KAAK,CAAC2B,QAAN,GAAiB,UAAjB,GAA8B3B,KAAK,CAAC4B;AAA3F;AAJF,QALF,eAYE,KAAC,IAAD,CAAM,IAAN;AAAA,+BACE,KAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE5B,KAAK,CAAC2B,QAAxB;AAAkC,UAAA,IAAI,EAAC,SAAvC;AAAiD,UAAA,QAAQ,EAAC,QAA1D;AAAA,oBACG3B,KAAK,CAAC6B;AADT;AADF,QAZF;AAAA,MAPF;AAAA,IADF;AA4BD;;AAED,eAAe9B,WAAf","sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Form, Input, Button, Avatar, Card } from 'antd'\nimport { POST_COMMENT_REQUEST } from '../../../reducers/types'\n\nfunction CommentForm(props) {\n\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const { currentUser } = useSelector(state => state.user)\n\n  const onFinish = (value) => {\n    const payload = {\n      content: value.content,\n      writer: currentUser.userId,\n      ...props.payload,\n    }\n    if (props.responseTo) {\n      payload.responseTo = props.responseTo;\n    }\n    dispatch({\n      type: POST_COMMENT_REQUEST,\n      payload\n    })\n    form.resetFields();\n  }\n\n  return (\n    <div style={{ display: 'flex', marginTop: 20, marginBottom: -30 }}>\n      <Card.Meta\n        avatar={<Avatar src={currentUser.image} style={{ marginTop: 10 }} />}\n        title={<span style={{ fontSize: 14 }}>{currentUser.name}</span>}\n        description={<span >{currentUser.email}</span>}\n        style={{ marginRight: 15 }}\n      />\n      <Form\n        form={form}\n        onFinish={onFinish}\n        style={{ width: '70%' }}\n      >\n        <Form.Item\n          name=\"content\"\n          rules={[{ required: true, message: '내용을 입력해주세요.' }]}\n        >\n          <Input.TextArea disabled={props.disabled} placeholder={props.disabled ? '로그인해주세요.' : props.placeholder} />\n        </Form.Item>\n\n        <Form.Item >\n          <Button disabled={props.disabled} type=\"primary\" htmlType=\"submit\">\n            {props.description}\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n\nexport default CommentForm\n"]},"metadata":{},"sourceType":"module"}