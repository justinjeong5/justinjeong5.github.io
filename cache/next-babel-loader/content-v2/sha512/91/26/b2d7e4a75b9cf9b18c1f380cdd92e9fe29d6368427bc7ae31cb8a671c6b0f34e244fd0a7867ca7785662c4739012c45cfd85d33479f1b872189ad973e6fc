{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Avatar, Comment } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport CommentForm from './CommentForm';\n\nfunction SingleComment(props) {\n  var comment = props.comment;\n\n  var _useState = useState(false),\n      toggleReply = _useState[0],\n      setToggleReply = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      currentUser = _useSelector.currentUser;\n\n  var handleReply = function handleReply() {\n    setToggleReply(function (prev) {\n      return !prev;\n    });\n  };\n\n  var actions = [/*#__PURE__*/_jsx(\"span\", {\n    children: \"\\uC88B\\uC544\\uC694\"\n  }), /*#__PURE__*/_jsx(\"span\", {\n    children: \"\\uC2E0\\uACE0\\uD558\\uAE30\"\n  })];\n\n  if (comment.writer._id !== currentUser.userId) {\n    if (currentUser.isAuth) {\n      actions.unshift( /*#__PURE__*/_jsx(\"span\", {\n        onClick: handleReply,\n        children: \"\\uB300\\uB313\\uAE00 \\uB2EC\\uAE30\"\n      }));\n    }\n  }\n\n  return /*#__PURE__*/_jsx(Comment, {\n    author: /*#__PURE__*/_jsx(\"span\", {\n      style: {\n        color: 'black'\n      },\n      children: comment.writer.name\n    }),\n    avatar: /*#__PURE__*/_jsx(Avatar, {\n      style: {\n        cursor: 'default'\n      },\n      src: comment.writer.image,\n      alt: comment.writer.name\n    }),\n    content: /*#__PURE__*/_jsx(\"p\", {\n      children: comment.content\n    }),\n    datetime: /*#__PURE__*/_jsx(\"span\", {\n      children: moment(comment.createdAt).fromNow()\n    }),\n    actions: actions,\n    children: toggleReply && /*#__PURE__*/_jsx(CommentForm, {\n      payload: props.payload,\n      description: props.description,\n      placeholder: props.placeholder,\n      responseTo: comment._id\n    })\n  }, uuidv4());\n}\n\nexport default SingleComment;","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/components/utils/Comment/SingleComment.js"],"names":["React","useState","useSelector","Avatar","Comment","v4","uuidv4","moment","CommentForm","SingleComment","props","comment","toggleReply","setToggleReply","state","user","currentUser","handleReply","prev","actions","writer","_id","userId","isAuth","unshift","color","name","cursor","image","content","createdAt","fromNow","payload","description","placeholder"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,MAAhC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,MAEpBC,OAFoB,GAERD,KAFQ,CAEpBC,OAFoB;;AAAA,kBAGUV,QAAQ,CAAC,KAAD,CAHlB;AAAA,MAGrBW,WAHqB;AAAA,MAGRC,cAHQ;;AAAA,qBAIJX,WAAW,CAAC,UAAAY,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAJP;AAAA,MAIpBC,WAJoB,gBAIpBA,WAJoB;;AAM5B,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBJ,IAAAA,cAAc,CAAC,UAAAK,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAAd;AACD,GAFD;;AAIA,MAAMC,OAAO,GAAG,cAAC;AAAA;AAAA,IAAD,eAAmB;AAAA;AAAA,IAAnB,CAAhB;;AACA,MAAIR,OAAO,CAACS,MAAR,CAAeC,GAAf,KAAuBL,WAAW,CAACM,MAAvC,EAA+C;AAC7C,QAAIN,WAAW,CAACO,MAAhB,EAAwB;AACtBJ,MAAAA,OAAO,CAACK,OAAR,eAAgB;AAAM,QAAA,OAAO,EAAEP,WAAf;AAAA;AAAA,QAAhB;AACD;AACF;;AAED,sBACE,KAAC,OAAD;AACE,IAAA,MAAM,eAAE;AAAM,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA,gBAAkCd,OAAO,CAACS,MAAR,CAAeM;AAAjD,MADV;AAEE,IAAA,MAAM,eAAE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAf;AAAsC,MAAA,GAAG,EAAEhB,OAAO,CAACS,MAAR,CAAeQ,KAA1D;AAAiE,MAAA,GAAG,EAAEjB,OAAO,CAACS,MAAR,CAAeM;AAArF,MAFV;AAGE,IAAA,OAAO,eAAE;AAAA,gBAAIf,OAAO,CAACkB;AAAZ,MAHX;AAIE,IAAA,QAAQ,eAAE;AAAA,gBAAOtB,MAAM,CAACI,OAAO,CAACmB,SAAT,CAAN,CAA0BC,OAA1B;AAAP,MAJZ;AAKE,IAAA,OAAO,EAAEZ,OALX;AAAA,cAQGP,WAAW,iBAAI,KAAC,WAAD;AAAa,MAAA,OAAO,EAAEF,KAAK,CAACsB,OAA5B;AAAqC,MAAA,WAAW,EAAEtB,KAAK,CAACuB,WAAxD;AAAqE,MAAA,WAAW,EAAEvB,KAAK,CAACwB,WAAxF;AAAqG,MAAA,UAAU,EAAEvB,OAAO,CAACU;AAAzH;AARlB,KAMOf,MAAM,EANb,CADF;AAYD;;AAED,eAAeG,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Avatar, Comment } from 'antd'\nimport { v4 as uuidv4 } from 'uuid'\nimport moment from 'moment'\nimport CommentForm from './CommentForm'\n\nfunction SingleComment(props) {\n\n  const { comment } = props;\n  const [toggleReply, setToggleReply] = useState(false);\n  const { currentUser } = useSelector(state => state.user)\n\n  const handleReply = () => {\n    setToggleReply(prev => !prev)\n  }\n\n  const actions = [<span>좋아요</span>, <span>신고하기</span>]\n  if (comment.writer._id !== currentUser.userId) {\n    if (currentUser.isAuth) {\n      actions.unshift(<span onClick={handleReply}>대댓글 달기</span>)\n    }\n  }\n\n  return (\n    <Comment\n      author={<span style={{ color: 'black' }}>{comment.writer.name}</span>}\n      avatar={<Avatar style={{ cursor: 'default' }} src={comment.writer.image} alt={comment.writer.name} />}\n      content={<p>{comment.content}</p>}\n      datetime={<span>{moment(comment.createdAt).fromNow()}</span>}\n      actions={actions}\n      key={uuidv4()}\n    >\n      {toggleReply && <CommentForm payload={props.payload} description={props.description} placeholder={props.placeholder} responseTo={comment._id} />}\n    </Comment>\n  )\n}\n\nexport default SingleComment\n"]},"metadata":{},"sourceType":"module"}