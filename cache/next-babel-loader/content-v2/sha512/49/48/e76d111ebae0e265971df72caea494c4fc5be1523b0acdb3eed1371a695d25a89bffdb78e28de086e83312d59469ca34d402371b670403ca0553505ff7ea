{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/justinjeong/Github/javascript/githubIo/client/components/utils/Comment/SingleComment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Avatar, Comment } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport CommentForm from './CommentForm';\n\nfunction SingleComment(props) {\n  _s();\n\n  const {\n    comment\n  } = props;\n  const {\n    0: toggleReply,\n    1: setToggleReply\n  } = useState(false);\n  const {\n    currentUser\n  } = useSelector(state => state.user);\n\n  const handleReply = () => {\n    setToggleReply(prev => !prev);\n  };\n\n  const actions = [/*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"\\uC88B\\uC544\\uC694\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 20\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"\\uC2E0\\uACE0\\uD558\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 38\n  }, this)];\n\n  if (comment.writer._id !== currentUser.userId) {\n    if (currentUser.isAuth) {\n      actions.unshift( /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: handleReply,\n        children: \"\\uB300\\uB313\\uAE00 \\uB2EC\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 23\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Comment, {\n    author: /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'black'\n      },\n      children: comment.writer.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }, this),\n    avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n      style: {\n        cursor: 'default'\n      },\n      src: comment.writer.image,\n      alt: comment.writer.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 15\n    }, this),\n    content: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: comment.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this),\n    datetime: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: moment(comment.createdAt).fromNow()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this),\n    actions: actions,\n    children: toggleReply && /*#__PURE__*/_jsxDEV(CommentForm, {\n      payload: props.payload,\n      description: props.description,\n      placeholder: props.placeholder,\n      responseTo: comment._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }, this)\n  }, uuidv4(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SingleComment, \"erXfOJZf7Ju70IyRUmsIznGoBlI=\", false, function () {\n  return [useSelector];\n});\n\n_c = SingleComment;\nexport default SingleComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleComment\");","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/components/utils/Comment/SingleComment.js"],"names":["React","useState","useSelector","Avatar","Comment","v4","uuidv4","moment","CommentForm","SingleComment","props","comment","toggleReply","setToggleReply","currentUser","state","user","handleReply","prev","actions","writer","_id","userId","isAuth","unshift","color","name","cursor","image","content","createdAt","fromNow","payload","description","placeholder"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,MAAhC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAE5B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,QAAM;AAAA,OAACE,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAkBZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAnC;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxBJ,IAAAA,cAAc,CAACK,IAAI,IAAI,CAACA,IAAV,CAAd;AACD,GAFD;;AAIA,QAAMC,OAAO,GAAG,cAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAD,eAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAnB,CAAhB;;AACA,MAAIR,OAAO,CAACS,MAAR,CAAeC,GAAf,KAAuBP,WAAW,CAACQ,MAAvC,EAA+C;AAC7C,QAAIR,WAAW,CAACS,MAAhB,EAAwB;AACtBJ,MAAAA,OAAO,CAACK,OAAR,eAAgB;AAAM,QAAA,OAAO,EAAEP,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAhB;AACD;AACF;;AAED,sBACE,QAAC,OAAD;AACE,IAAA,MAAM,eAAE;AAAM,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA,gBAAkCd,OAAO,CAACS,MAAR,CAAeM;AAAjD;AAAA;AAAA;AAAA;AAAA,YADV;AAEE,IAAA,MAAM,eAAE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAf;AAAsC,MAAA,GAAG,EAAEhB,OAAO,CAACS,MAAR,CAAeQ,KAA1D;AAAiE,MAAA,GAAG,EAAEjB,OAAO,CAACS,MAAR,CAAeM;AAArF;AAAA;AAAA;AAAA;AAAA,YAFV;AAGE,IAAA,OAAO,eAAE;AAAA,gBAAIf,OAAO,CAACkB;AAAZ;AAAA;AAAA;AAAA;AAAA,YAHX;AAIE,IAAA,QAAQ,eAAE;AAAA,gBAAOtB,MAAM,CAACI,OAAO,CAACmB,SAAT,CAAN,CAA0BC,OAA1B;AAAP;AAAA;AAAA;AAAA;AAAA,YAJZ;AAKE,IAAA,OAAO,EAAEZ,OALX;AAAA,cAQGP,WAAW,iBAAI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEF,KAAK,CAACsB,OAA5B;AAAqC,MAAA,WAAW,EAAEtB,KAAK,CAACuB,WAAxD;AAAqE,MAAA,WAAW,EAAEvB,KAAK,CAACwB,WAAxF;AAAqG,MAAA,UAAU,EAAEvB,OAAO,CAACU;AAAzH;AAAA;AAAA;AAAA;AAAA;AARlB,KAMOf,MAAM,EANb;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA7BQG,a;UAIiBP,W;;;KAJjBO,a;AA+BT,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Avatar, Comment } from 'antd'\nimport { v4 as uuidv4 } from 'uuid'\nimport moment from 'moment'\nimport CommentForm from './CommentForm'\n\nfunction SingleComment(props) {\n\n  const { comment } = props;\n  const [toggleReply, setToggleReply] = useState(false);\n  const { currentUser } = useSelector(state => state.user)\n\n  const handleReply = () => {\n    setToggleReply(prev => !prev)\n  }\n\n  const actions = [<span>좋아요</span>, <span>신고하기</span>]\n  if (comment.writer._id !== currentUser.userId) {\n    if (currentUser.isAuth) {\n      actions.unshift(<span onClick={handleReply}>대댓글 달기</span>)\n    }\n  }\n\n  return (\n    <Comment\n      author={<span style={{ color: 'black' }}>{comment.writer.name}</span>}\n      avatar={<Avatar style={{ cursor: 'default' }} src={comment.writer.image} alt={comment.writer.name} />}\n      content={<p>{comment.content}</p>}\n      datetime={<span>{moment(comment.createdAt).fromNow()}</span>}\n      actions={actions}\n      key={uuidv4()}\n    >\n      {toggleReply && <CommentForm payload={props.payload} description={props.description} placeholder={props.placeholder} responseTo={comment._id} />}\n    </Comment>\n  )\n}\n\nexport default SingleComment\n"]},"metadata":{},"sourceType":"module"}