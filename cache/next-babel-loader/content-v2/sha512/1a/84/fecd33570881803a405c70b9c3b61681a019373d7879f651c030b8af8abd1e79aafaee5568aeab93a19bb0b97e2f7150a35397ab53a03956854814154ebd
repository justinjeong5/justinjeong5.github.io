{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/justinjeong/Github/javascript/githubIo/client/components/Chatting/SidePanel/Favorited.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Typography } from 'antd';\nimport { BellOutlined } from '@ant-design/icons';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SET_CURRENT_CHAT_ROOM, LOAD_FAVORITED_REQUEST, LOAD_FAVORITED_LIST_REQUEST } from '../../../reducers/types';\nconst {\n  Title\n} = Typography;\n\nfunction Favorited() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    currentUser\n  } = useSelector(state => state.user);\n  const {\n    currentChatRoom\n  } = useSelector(state => state.chat);\n  const {\n    favoritedList,\n    loadFavoritedListDone,\n    changeFavoriteDone\n  } = useSelector(state => state.favorite);\n  useEffect(() => {\n    if (currentUser.isAuth && currentChatRoom) {\n      dispatch({\n        type: LOAD_FAVORITED_REQUEST,\n        payload: {\n          userFrom: currentUser.userId,\n          chatRoom: currentChatRoom._id\n        }\n      });\n    }\n  }, [dispatch, currentUser, currentChatRoom]);\n  useEffect(() => {\n    if (currentChatRoom) {\n      dispatch({\n        type: LOAD_FAVORITED_LIST_REQUEST,\n        payload: {\n          userFrom: currentUser.userId\n        }\n      });\n    }\n  }, [dispatch, changeFavoriteDone, currentChatRoom, currentUser]);\n  const handleCurrentRoom = useCallback(chatRoomId => () => {\n    dispatch({\n      type: SET_CURRENT_CHAT_ROOM,\n      payload: chatRoomId\n    });\n  }, []);\n  const renderSelected = useCallback(chatRoomId => {\n    if (chatRoomId === currentChatRoom._id) {\n      return 'gray';\n    }\n\n    return '';\n  }, [currentChatRoom]);\n  const renderChatRooms = useCallback(() => favoritedList === null || favoritedList === void 0 ? void 0 : favoritedList.filter(item => {\n    return item.chatRoom;\n  }).map(favorited => {\n    const chatRoom = favorited.chatRoom;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleCurrentRoom(chatRoom._id),\n      style: {\n        backgroundColor: renderSelected(chatRoom._id),\n        margin: '0.2rem',\n        padding: '0.2rem',\n        borderRadius: '0.3rem'\n      },\n      children: `# ${chatRoom.title}`\n    }, uuidv4(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }), [favoritedList, currentChatRoom]);\n  const renderChatRoomCount = useCallback(() => {\n    return favoritedList ? ` 즐겨찾기 [${favoritedList.filter(item => {\n      return item.chatRoom;\n    }).length}] ` : ' 즐겨찾기 [0]';\n  }, [favoritedList]);\n  const renderEmptyMessages = useMemo(() => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'gray'\n    },\n    children: \"\\uB85C\\uADF8\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 46\n  }, this), []);\n  const rootDivStyle = useMemo(() => ({\n    color: 'white'\n  }), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      level: 5,\n      style: rootDivStyle,\n      children: [/*#__PURE__*/_jsxDEV(BellOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), renderChatRoomCount()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), loadFavoritedListDone && (favoritedList ? renderChatRooms : renderEmptyMessages)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Favorited, \"UWVAoYWzt6BjHuRenvOXkCgmnJI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Favorited;\nexport default Favorited;\n\nvar _c;\n\n$RefreshReg$(_c, \"Favorited\");","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/components/Chatting/SidePanel/Favorited.js"],"names":["React","useCallback","useEffect","useMemo","useDispatch","useSelector","Typography","BellOutlined","v4","uuidv4","SET_CURRENT_CHAT_ROOM","LOAD_FAVORITED_REQUEST","LOAD_FAVORITED_LIST_REQUEST","Title","Favorited","dispatch","currentUser","state","user","currentChatRoom","chat","favoritedList","loadFavoritedListDone","changeFavoriteDone","favorite","isAuth","type","payload","userFrom","userId","chatRoom","_id","handleCurrentRoom","chatRoomId","renderSelected","renderChatRooms","filter","item","map","favorited","backgroundColor","margin","padding","borderRadius","title","renderChatRoomCount","length","renderEmptyMessages","color","rootDivStyle"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,QAAuD,OAAvD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,EAAwDC,2BAAxD,QAA2F,yBAA3F;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYP,UAAlB;;AAEA,SAASQ,SAAT,GAAqB;AAAA;;AAEnB,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAkBX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAnC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAsBd,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAvC;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,qBAAjB;AAAwCC,IAAAA;AAAxC,MAA+DlB,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACO,QAAhB,CAAhF;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,WAAW,CAACS,MAAZ,IAAsBN,eAA1B,EAA2C;AACzCJ,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEf,sBADC;AAEPgB,QAAAA,OAAO,EAAE;AACPC,UAAAA,QAAQ,EAAEZ,WAAW,CAACa,MADf;AAEPC,UAAAA,QAAQ,EAAEX,eAAe,CAACY;AAFnB;AAFF,OAAD,CAAR;AAOD;AACF,GAVQ,EAUN,CAAChB,QAAD,EAAWC,WAAX,EAAwBG,eAAxB,CAVM,CAAT;AAYAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,eAAJ,EAAqB;AACnBJ,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEd,2BADC;AAEPe,QAAAA,OAAO,EAAE;AACPC,UAAAA,QAAQ,EAAEZ,WAAW,CAACa;AADf;AAFF,OAAD,CAAR;AAMD;AACF,GATQ,EASN,CAACd,QAAD,EAAWQ,kBAAX,EAA+BJ,eAA/B,EAAgDH,WAAhD,CATM,CAAT;AAWA,QAAMgB,iBAAiB,GAAG/B,WAAW,CAAEgC,UAAD,IAAgB,MAAM;AAC1DlB,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEhB,qBADC;AAEPiB,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAID,GALoC,EAKlC,EALkC,CAArC;AAOA,QAAMC,cAAc,GAAGjC,WAAW,CAAEgC,UAAD,IAAgB;AACjD,QAAIA,UAAU,KAAKd,eAAe,CAACY,GAAnC,EAAwC;AACtC,aAAO,MAAP;AACD;;AACD,WAAO,EAAP;AACD,GALiC,EAK/B,CAACZ,eAAD,CAL+B,CAAlC;AAOA,QAAMgB,eAAe,GAAGlC,WAAW,CAAC,MAAMoB,aAAN,aAAMA,aAAN,uBAAMA,aAAa,CAAEe,MAAf,CAAsBC,IAAI,IAAI;AACtE,WAAOA,IAAI,CAACP,QAAZ;AACD,GAFyC,EAEvCQ,GAFuC,CAElCC,SAAD,IAAe;AACpB,UAAMT,QAAQ,GAAGS,SAAS,CAACT,QAA3B;AACA,wBACE;AAAoB,MAAA,OAAO,EAAEE,iBAAiB,CAACF,QAAQ,CAACC,GAAV,CAA9C;AACE,MAAA,KAAK,EAAE;AACLS,QAAAA,eAAe,EAAEN,cAAc,CAACJ,QAAQ,CAACC,GAAV,CAD1B;AAELU,QAAAA,MAAM,EAAE,QAFH;AAGLC,QAAAA,OAAO,EAAE,QAHJ;AAILC,QAAAA,YAAY,EAAE;AAJT,OADT;AAAA,gBAQI,KAAIb,QAAQ,CAACc,KAAM;AARvB,OAAUnC,MAAM,EAAhB;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAhByC,CAAP,EAgB/B,CAACY,aAAD,EAAgBF,eAAhB,CAhB+B,CAAnC;AAkBA,QAAM0B,mBAAmB,GAAG5C,WAAW,CAAC,MAAM;AAC5C,WAAQoB,aAAa,GAChB,UAASA,aAAa,CAACe,MAAd,CAAqBC,IAAI,IAAI;AACvC,aAAOA,IAAI,CAACP,QAAZ;AACD,KAFW,EAETgB,MAAO,IAHS,GAIjB,WAJJ;AAMD,GAPsC,EAOpC,CAACzB,aAAD,CAPoC,CAAvC;AASA,QAAM0B,mBAAmB,GAAG5C,OAAO,CAAC,mBAAO;AAAK,IAAA,KAAK,EAAE;AAAE6C,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR,EAE1B,EAF0B,CAAnC;AAGA,QAAMC,YAAY,GAAG9C,OAAO,CAAC,OAAO;AAAE6C,IAAAA,KAAK,EAAE;AAAT,GAAP,CAAD,EAA6B,EAA7B,CAA5B;AAEA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAE,CAAd;AAAiB,MAAA,KAAK,EAAEC,YAAxB;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,EACmBJ,mBAAmB,EADtC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIGvB,qBAAqB,KAAKD,aAAa,GAAGc,eAAH,GAAqBY,mBAAvC,CAJxB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GApFQjC,S;UAEUV,W,EACOC,W,EACIA,W,EACyCA,W;;;KAL9DS,S;AAsFT,eAAeA,SAAf","sourcesContent":["import React, { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Typography } from 'antd'\nimport { BellOutlined } from '@ant-design/icons'\nimport { v4 as uuidv4 } from 'uuid'\nimport { SET_CURRENT_CHAT_ROOM, LOAD_FAVORITED_REQUEST, LOAD_FAVORITED_LIST_REQUEST } from '../../../reducers/types';\nconst { Title } = Typography;\n\nfunction Favorited() {\n\n  const dispatch = useDispatch();\n  const { currentUser } = useSelector(state => state.user)\n  const { currentChatRoom } = useSelector(state => state.chat)\n  const { favoritedList, loadFavoritedListDone, changeFavoriteDone } = useSelector(state => state.favorite)\n\n  useEffect(() => {\n    if (currentUser.isAuth && currentChatRoom) {\n      dispatch({\n        type: LOAD_FAVORITED_REQUEST,\n        payload: {\n          userFrom: currentUser.userId,\n          chatRoom: currentChatRoom._id,\n        }\n      })\n    }\n  }, [dispatch, currentUser, currentChatRoom])\n\n  useEffect(() => {\n    if (currentChatRoom) {\n      dispatch({\n        type: LOAD_FAVORITED_LIST_REQUEST,\n        payload: {\n          userFrom: currentUser.userId,\n        }\n      })\n    }\n  }, [dispatch, changeFavoriteDone, currentChatRoom, currentUser])\n\n  const handleCurrentRoom = useCallback((chatRoomId) => () => {\n    dispatch({\n      type: SET_CURRENT_CHAT_ROOM,\n      payload: chatRoomId,\n    })\n  }, [])\n\n  const renderSelected = useCallback((chatRoomId) => {\n    if (chatRoomId === currentChatRoom._id) {\n      return 'gray'\n    }\n    return ''\n  }, [currentChatRoom])\n\n  const renderChatRooms = useCallback(() => favoritedList?.filter(item => {\n    return item.chatRoom\n  }).map((favorited) => {\n    const chatRoom = favorited.chatRoom;\n    return (\n      <div key={uuidv4()} onClick={handleCurrentRoom(chatRoom._id)}\n        style={{\n          backgroundColor: renderSelected(chatRoom._id),\n          margin: '0.2rem',\n          padding: '0.2rem',\n          borderRadius: '0.3rem'\n        }}\n      >\n        {`# ${chatRoom.title}`}\n      </div>\n    )\n  }), [favoritedList, currentChatRoom])\n\n  const renderChatRoomCount = useCallback(() => {\n    return (favoritedList\n      ? ` 즐겨찾기 [${favoritedList.filter(item => {\n        return item.chatRoom\n      }).length}] `\n      : ' 즐겨찾기 [0]'\n    )\n  }, [favoritedList])\n\n  const renderEmptyMessages = useMemo(() => (<div style={{ color: 'gray' }}>\n    로그인해주세요.\n  </div>), [])\n  const rootDivStyle = useMemo(() => ({ color: 'white' }), [])\n\n  return (\n    <div>\n      <Title level={5} style={rootDivStyle}>\n        <BellOutlined />{renderChatRoomCount()}\n      </Title>\n      {loadFavoritedListDone && (favoritedList ? renderChatRooms : renderEmptyMessages)}\n    </div>\n  )\n}\n\nexport default Favorited\n"]},"metadata":{},"sourceType":"module"}