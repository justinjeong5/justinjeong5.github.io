{"ast":null,"code":"import _regeneratorRuntime from \"/Users/justinjeong/Github/javascript/githubIo/client/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saveComment),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadComments),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchSaveComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadComments),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(commentSaga);\n\nimport { all, fork, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { POST_COMMENT_REQUEST, POST_COMMENT_SUCCESS, POST_COMMENT_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/types';\n\nfunction saveCommentAPI(data) {\n  return axios.post('/api/comment/save', data);\n}\n\nfunction saveComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function saveComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(saveCommentAPI, action.payload);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: POST_COMMENT_SUCCESS,\n            payload: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: POST_COMMENT_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction loadCommentsAPI(data) {\n  return axios.post('/api/comment/comments', data);\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadCommentsAPI, action.payload);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            payload: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchSaveComment() {\n  return _regeneratorRuntime.wrap(function watchSaveComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(POST_COMMENT_REQUEST, saveComment);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function commentSaga() {\n  return _regeneratorRuntime.wrap(function commentSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchSaveComment), fork(watchLoadComments)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/sagas/comment.js"],"names":["saveComment","loadComments","watchSaveComment","watchLoadComments","commentSaga","all","fork","put","call","takeLatest","axios","POST_COMMENT_REQUEST","POST_COMMENT_SUCCESS","POST_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","saveCommentAPI","data","post","action","payload","result","type","console","error","response","loadCommentsAPI"],"mappings":";;oDAYUA,W;qDAoBAC,Y;qDAgBAC,gB;qDAIAC,iB;qDAKeC,W;;AAzDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,oBADF,EACwBC,oBADxB,EAC8CC,oBAD9C,EAEEC,qBAFF,EAEyBC,qBAFzB,EAEgDC,qBAFhD,QAGO,mBAHP;;AAKA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOR,KAAK,CAACS,IAAN,CAAW,mBAAX,EAAgCD,IAAhC,CAAP;AACD;;AAED,SAAUlB,WAAV,CAAsBoB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMZ,IAAI,CAACS,cAAD,EAAiBG,MAAM,CAACC,OAAxB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMf,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEX,oBADE;AAERS,YAAAA,OAAO,EAAEC,MAAM,CAACJ;AAFR,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIM,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMlB,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEV,oBADE;AAERY,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeR;AAFd,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASS,eAAT,CAAyBT,IAAzB,EAA+B;AAC7B,SAAOR,KAAK,CAACS,IAAN,CAAW,uBAAX,EAAoCD,IAApC,CAAP;AACD;;AAED,SAAUjB,YAAV,CAAuBmB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMZ,IAAI,CAACmB,eAAD,EAAkBP,MAAM,CAACC,OAAzB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMf,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAER,qBADE;AAERM,YAAAA,OAAO,EAAEC,MAAM,CAACJ;AAFR,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIM,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMlB,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEP,qBADE;AAERS,YAAAA,KAAK,EAAE,aAAMC,QAAN,CAAeR;AAFd,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUhB,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACE,oBAAD,EAAuBX,WAAvB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACK,qBAAD,EAAwBb,YAAxB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACJ,gBAAD,CADI,EAERI,IAAI,CAACH,iBAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, call, takeLatest } from 'redux-saga/effects'\nimport axios from 'axios';\n\nimport {\n  POST_COMMENT_REQUEST, POST_COMMENT_SUCCESS, POST_COMMENT_FAILURE,\n  LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\n} from '../reducers/types'\n\nfunction saveCommentAPI(data) {\n  return axios.post('/api/comment/save', data)\n}\n\nfunction* saveComment(action) {\n  try {\n    const result = yield call(saveCommentAPI, action.payload);\n    yield put({\n      type: POST_COMMENT_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: POST_COMMENT_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction loadCommentsAPI(data) {\n  return axios.post('/api/comment/comments', data)\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.payload);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction* watchSaveComment() {\n  yield takeLatest(POST_COMMENT_REQUEST, saveComment)\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\n\nexport default function* commentSaga() {\n  yield all([\n    fork(watchSaveComment),\n    fork(watchLoadComments),\n  ])\n}"]},"metadata":{},"sourceType":"module"}