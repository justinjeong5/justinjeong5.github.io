{"ast":null,"code":"import { all, fork, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { API_URL, API_KEY } from '../config/key';\nimport { LOAD_MOVIES_REQUEST, LOAD_MOVIES_SUCCESS, LOAD_MOVIES_FAILURE, LOAD_MOVIE_DETAIL_REQUEST, LOAD_MOVIE_DETAIL_SUCCESS, LOAD_MOVIE_DETAIL_FAILURE, LOAD_MOVIE_TRAILER_REQUEST, LOAD_MOVIE_TRAILER_SUCCESS, LOAD_MOVIE_TRAILER_FAILURE, LOAD_MOVIE_CASTING_REQUEST, LOAD_MOVIE_CASTING_SUCCESS, LOAD_MOVIE_CASTING_FAILURE } from '../reducers/types';\n\nfunction LoadMoviesAPI(data) {\n  return axios.get(`${API_URL}/movie/popular?api_key=${API_KEY}&language=ko-KR&page=${data}`);\n}\n\nfunction* loadMovies(action) {\n  try {\n    const result = yield call(LoadMoviesAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIES_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIES_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction LoadMovieDetailAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}?api_key=${API_KEY}&language=ko-KR`, {\n    withCredentials: false\n  });\n}\n\nfunction* loadMovieDetail(action) {\n  try {\n    const result = yield call(LoadMovieDetailAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_DETAIL_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIE_DETAIL_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction LoadMovieTrailerAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/videos?api_key=${API_KEY}`, {\n    withCredentials: false\n  });\n}\n\nfunction* loadMovieTrailer(action) {\n  try {\n    const result = yield call(LoadMovieTrailerAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_TRAILER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIE_TRAILER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction LoadMovieCastingAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/credits?api_key=${API_KEY}`, {\n    withCredentials: false\n  });\n}\n\nfunction* loadMovieCasting(action) {\n  try {\n    const result = yield call(LoadMovieCastingAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_CASTING_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIE_CASTING_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadMovies() {\n  yield takeLatest(LOAD_MOVIES_REQUEST, loadMovies);\n}\n\nfunction* watchLoadMovieDetail() {\n  yield takeLatest(LOAD_MOVIE_DETAIL_REQUEST, loadMovieDetail);\n}\n\nfunction* watchLoadMovieTrailer() {\n  yield takeLatest(LOAD_MOVIE_TRAILER_REQUEST, loadMovieTrailer);\n}\n\nfunction* watchLoadMovieCasting() {\n  yield takeLatest(LOAD_MOVIE_CASTING_REQUEST, loadMovieCasting);\n}\n\nexport default function* movieSaga() {\n  yield all([fork(watchLoadMovies), fork(watchLoadMovieDetail), fork(watchLoadMovieTrailer), fork(watchLoadMovieCasting)]);\n}","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/sagas/movie.js"],"names":["all","fork","put","call","takeLatest","axios","API_URL","API_KEY","LOAD_MOVIES_REQUEST","LOAD_MOVIES_SUCCESS","LOAD_MOVIES_FAILURE","LOAD_MOVIE_DETAIL_REQUEST","LOAD_MOVIE_DETAIL_SUCCESS","LOAD_MOVIE_DETAIL_FAILURE","LOAD_MOVIE_TRAILER_REQUEST","LOAD_MOVIE_TRAILER_SUCCESS","LOAD_MOVIE_TRAILER_FAILURE","LOAD_MOVIE_CASTING_REQUEST","LOAD_MOVIE_CASTING_SUCCESS","LOAD_MOVIE_CASTING_FAILURE","LoadMoviesAPI","data","get","loadMovies","action","result","payload","type","error","console","response","LoadMovieDetailAPI","withCredentials","loadMovieDetail","LoadMovieTrailerAPI","loadMovieTrailer","LoadMovieCastingAPI","loadMovieCasting","watchLoadMovies","watchLoadMovieDetail","watchLoadMovieTrailer","watchLoadMovieCasting","movieSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, call, takeLatest } from 'redux-saga/effects'\nimport axios from 'axios';\nimport { API_URL, API_KEY } from '../config/key'\n\nimport {\n  LOAD_MOVIES_REQUEST, LOAD_MOVIES_SUCCESS, LOAD_MOVIES_FAILURE,\n  LOAD_MOVIE_DETAIL_REQUEST, LOAD_MOVIE_DETAIL_SUCCESS, LOAD_MOVIE_DETAIL_FAILURE,\n  LOAD_MOVIE_TRAILER_REQUEST, LOAD_MOVIE_TRAILER_SUCCESS, LOAD_MOVIE_TRAILER_FAILURE,\n  LOAD_MOVIE_CASTING_REQUEST, LOAD_MOVIE_CASTING_SUCCESS, LOAD_MOVIE_CASTING_FAILURE,\n} from '../reducers/types'\n\nfunction LoadMoviesAPI(data) {\n  return axios.get(`${API_URL}/movie/popular?api_key=${API_KEY}&language=ko-KR&page=${data}`)\n}\n\nfunction* loadMovies(action) {\n  try {\n    const result = yield call(LoadMoviesAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIES_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIES_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction LoadMovieDetailAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}?api_key=${API_KEY}&language=ko-KR`, { withCredentials: false })\n}\n\nfunction* loadMovieDetail(action) {\n  try {\n    const result = yield call(LoadMovieDetailAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_DETAIL_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIE_DETAIL_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction LoadMovieTrailerAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/videos?api_key=${API_KEY}`, { withCredentials: false })\n}\n\nfunction* loadMovieTrailer(action) {\n  try {\n    const result = yield call(LoadMovieTrailerAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_TRAILER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIE_TRAILER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction LoadMovieCastingAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/credits?api_key=${API_KEY}`, { withCredentials: false })\n}\n\nfunction* loadMovieCasting(action) {\n  try {\n    const result = yield call(LoadMovieCastingAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_CASTING_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIE_CASTING_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction* watchLoadMovies() {\n  yield takeLatest(LOAD_MOVIES_REQUEST, loadMovies)\n}\n\nfunction* watchLoadMovieDetail() {\n  yield takeLatest(LOAD_MOVIE_DETAIL_REQUEST, loadMovieDetail)\n}\n\nfunction* watchLoadMovieTrailer() {\n  yield takeLatest(LOAD_MOVIE_TRAILER_REQUEST, loadMovieTrailer)\n}\n\nfunction* watchLoadMovieCasting() {\n  yield takeLatest(LOAD_MOVIE_CASTING_REQUEST, loadMovieCasting)\n}\n\n\nexport default function* movieSaga() {\n  yield all([\n    fork(watchLoadMovies),\n    fork(watchLoadMovieDetail),\n    fork(watchLoadMovieTrailer),\n    fork(watchLoadMovieCasting),\n  ])\n}"]},"metadata":{},"sourceType":"module"}