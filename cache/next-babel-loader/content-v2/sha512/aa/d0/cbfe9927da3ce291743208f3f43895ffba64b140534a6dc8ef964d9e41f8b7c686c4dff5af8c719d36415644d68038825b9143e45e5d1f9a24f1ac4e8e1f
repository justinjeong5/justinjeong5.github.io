{"ast":null,"code":"import { all, fork, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { initiateSocket, disconnectSocket, detectError } from '../components/utils/socket';\nimport { SOCKET_CONNECT, SOCKET_DISCONNECT, SOCKET_SUBSCRIBE_REQUEST, SOCKET_SUBSCRIBE_SUCCESS, SOCKET_SUBSCRIBE_FAILURE, LOAD_CHATS_REQUEST, LOAD_CHATS_SUCCESS, LOAD_CHATS_FAILURE, LOAD_CHAT_ROOMS_REQUEST, LOAD_CHAT_ROOMS_SUCCESS, LOAD_CHAT_ROOMS_FAILURE, LOAD_CHAT_USERS_REQUEST, LOAD_CHAT_USERS_SUCCESS, LOAD_CHAT_USERS_FAILURE, CREATE_CHAT_ROOM_REQUEST, CREATE_CHAT_ROOM_SUCCESS, CREATE_CHAT_ROOM_FAILURE } from '../reducers/types';\n\nfunction* socketConnect() {\n  yield initiateSocket();\n  yield detectError();\n}\n\nfunction* socketDisconnect() {\n  yield disconnectSocket();\n}\n\nfunction* SocketSubscribe(action) {\n  if (action.error) {\n    yield put({\n      type: SOCKET_SUBSCRIBE_FAILURE,\n      payload: action.error\n    });\n  } else {\n    yield put({\n      type: SOCKET_SUBSCRIBE_SUCCESS,\n      payload: action.payload\n    });\n  }\n}\n\n_c = SocketSubscribe;\n\nfunction loadChatAPI(data) {\n  return axios.post('/api/chat/chats', data);\n}\n\nfunction* loadChat(action) {\n  try {\n    const result = yield call(loadChatAPI, action.payload);\n    yield put({\n      type: LOAD_CHATS_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CHATS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadChatRoomAPI() {\n  return axios.get('/api/chatRoom/chatRooms');\n}\n\nfunction* loadChatRoom() {\n  try {\n    const result = yield call(loadChatRoomAPI);\n    yield put({\n      type: LOAD_CHAT_ROOMS_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CHAT_ROOMS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadChatUsersAPI() {\n  return axios.get('/api/user/users');\n}\n\nfunction* loadChatUsers() {\n  try {\n    const result = yield call(loadChatUsersAPI);\n    yield put({\n      type: LOAD_CHAT_USERS_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_CHAT_USERS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* socketSubscribeCreateChatRoom(action) {\n  if (action.error) {\n    yield put({\n      type: CREATE_CHAT_ROOM_FAILURE,\n      payload: action.error\n    });\n  } else {\n    yield put({\n      type: CREATE_CHAT_ROOM_SUCCESS,\n      payload: action.payload\n    });\n  }\n}\n\nfunction* watchSocketConnect() {\n  yield takeLatest(SOCKET_CONNECT, socketConnect);\n}\n\nfunction* watchSocketDisonnect() {\n  yield takeLatest(SOCKET_DISCONNECT, socketDisconnect);\n}\n\nfunction* watchSocketSubscribe() {\n  yield takeLatest(SOCKET_SUBSCRIBE_REQUEST, SocketSubscribe);\n}\n\nfunction* watchLoadChat() {\n  yield takeLatest(LOAD_CHATS_REQUEST, loadChat);\n}\n\nfunction* watchLoadChatRoom() {\n  yield takeLatest(LOAD_CHAT_ROOMS_REQUEST, loadChatRoom);\n}\n\nfunction* watchLoadChatUsers() {\n  yield takeLatest(LOAD_CHAT_USERS_REQUEST, loadChatUsers);\n}\n\nfunction* watchSocketSubscribeCreateChatRoom() {\n  yield takeLatest(CREATE_CHAT_ROOM_REQUEST, socketSubscribeCreateChatRoom);\n}\n\nexport default function* chatSaga() {\n  yield all([fork(watchSocketConnect), fork(watchSocketDisonnect), fork(watchSocketSubscribe), fork(watchLoadChat), fork(watchLoadChatRoom), fork(watchLoadChatUsers), fork(watchSocketSubscribeCreateChatRoom)]);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketSubscribe\");","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/sagas/chat.js"],"names":["all","fork","put","call","takeLatest","axios","initiateSocket","disconnectSocket","detectError","SOCKET_CONNECT","SOCKET_DISCONNECT","SOCKET_SUBSCRIBE_REQUEST","SOCKET_SUBSCRIBE_SUCCESS","SOCKET_SUBSCRIBE_FAILURE","LOAD_CHATS_REQUEST","LOAD_CHATS_SUCCESS","LOAD_CHATS_FAILURE","LOAD_CHAT_ROOMS_REQUEST","LOAD_CHAT_ROOMS_SUCCESS","LOAD_CHAT_ROOMS_FAILURE","LOAD_CHAT_USERS_REQUEST","LOAD_CHAT_USERS_SUCCESS","LOAD_CHAT_USERS_FAILURE","CREATE_CHAT_ROOM_REQUEST","CREATE_CHAT_ROOM_SUCCESS","CREATE_CHAT_ROOM_FAILURE","socketConnect","socketDisconnect","SocketSubscribe","action","error","type","payload","loadChatAPI","data","post","loadChat","result","console","response","loadChatRoomAPI","get","loadChatRoom","loadChatUsersAPI","loadChatUsers","socketSubscribeCreateChatRoom","watchSocketConnect","watchSocketDisonnect","watchSocketSubscribe","watchLoadChat","watchLoadChatRoom","watchLoadChatUsers","watchSocketSubscribeCreateChatRoom","chatSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, call, takeLatest } from 'redux-saga/effects'\nimport axios from 'axios';\n\nimport { initiateSocket, disconnectSocket, detectError } from '../components/utils/socket'\n\nimport {\n  SOCKET_CONNECT, SOCKET_DISCONNECT,\n  SOCKET_SUBSCRIBE_REQUEST, SOCKET_SUBSCRIBE_SUCCESS, SOCKET_SUBSCRIBE_FAILURE,\n  LOAD_CHATS_REQUEST, LOAD_CHATS_SUCCESS, LOAD_CHATS_FAILURE,\n  LOAD_CHAT_ROOMS_REQUEST, LOAD_CHAT_ROOMS_SUCCESS, LOAD_CHAT_ROOMS_FAILURE,\n  LOAD_CHAT_USERS_REQUEST, LOAD_CHAT_USERS_SUCCESS, LOAD_CHAT_USERS_FAILURE,\n  CREATE_CHAT_ROOM_REQUEST, CREATE_CHAT_ROOM_SUCCESS, CREATE_CHAT_ROOM_FAILURE,\n} from '../reducers/types'\n\nfunction* socketConnect() {\n  yield initiateSocket();\n  yield detectError();\n}\n\nfunction* socketDisconnect() {\n  yield disconnectSocket();\n}\n\nfunction* SocketSubscribe(action) {\n  if (action.error) {\n    yield put({\n      type: SOCKET_SUBSCRIBE_FAILURE,\n      payload: action.error,\n    })\n  } else {\n    yield put({\n      type: SOCKET_SUBSCRIBE_SUCCESS,\n      payload: action.payload,\n    })\n  }\n}\n\nfunction loadChatAPI(data) {\n  return axios.post('/api/chat/chats', data)\n}\n\nfunction* loadChat(action) {\n  try {\n    const result = yield call(loadChatAPI, action.payload);\n    yield put({\n      type: LOAD_CHATS_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_CHATS_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction loadChatRoomAPI() {\n  return axios.get('/api/chatRoom/chatRooms')\n}\n\nfunction* loadChatRoom() {\n  try {\n    const result = yield call(loadChatRoomAPI);\n    yield put({\n      type: LOAD_CHAT_ROOMS_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_CHAT_ROOMS_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction loadChatUsersAPI() {\n  return axios.get('/api/user/users')\n}\n\nfunction* loadChatUsers() {\n  try {\n    const result = yield call(loadChatUsersAPI);\n    yield put({\n      type: LOAD_CHAT_USERS_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_CHAT_USERS_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction* socketSubscribeCreateChatRoom(action) {\n  if (action.error) {\n    yield put({\n      type: CREATE_CHAT_ROOM_FAILURE,\n      payload: action.error,\n    })\n  } else {\n    yield put({\n      type: CREATE_CHAT_ROOM_SUCCESS,\n      payload: action.payload,\n    })\n  }\n}\n\nfunction* watchSocketConnect() {\n  yield takeLatest(SOCKET_CONNECT, socketConnect)\n}\n\nfunction* watchSocketDisonnect() {\n  yield takeLatest(SOCKET_DISCONNECT, socketDisconnect)\n}\n\nfunction* watchSocketSubscribe() {\n  yield takeLatest(SOCKET_SUBSCRIBE_REQUEST, SocketSubscribe)\n}\n\nfunction* watchLoadChat() {\n  yield takeLatest(LOAD_CHATS_REQUEST, loadChat)\n}\n\nfunction* watchLoadChatRoom() {\n  yield takeLatest(LOAD_CHAT_ROOMS_REQUEST, loadChatRoom)\n}\n\nfunction* watchLoadChatUsers() {\n  yield takeLatest(LOAD_CHAT_USERS_REQUEST, loadChatUsers)\n}\n\nfunction* watchSocketSubscribeCreateChatRoom() {\n  yield takeLatest(CREATE_CHAT_ROOM_REQUEST, socketSubscribeCreateChatRoom)\n}\n\n\nexport default function* chatSaga() {\n  yield all([\n    fork(watchSocketConnect),\n    fork(watchSocketDisonnect),\n    fork(watchSocketSubscribe),\n    fork(watchLoadChat),\n    fork(watchLoadChatRoom),\n    fork(watchLoadChatUsers),\n    fork(watchSocketSubscribeCreateChatRoom),\n  ])\n}"]},"metadata":{},"sourceType":"module"}