{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, fork, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { CREATE_BLOG_POST_REQUEST, CREATE_BLOG_POST_SUCCESS, CREATE_BLOG_POST_FAILURE, LOAD_BLOG_POSTS_REQUEST, LOAD_BLOG_POSTS_SUCCESS, LOAD_BLOG_POSTS_FAILURE, RESET_LOAD_BLOG_POSTS, LOAD_BLOG_POST_REQUEST, LOAD_BLOG_POST_SUCCESS, LOAD_BLOG_POST_FAILURE, UPLOAD_BLOG_DATASET_REQUEST, UPLOAD_BLOG_DATASET_SUCCESS, UPLOAD_BLOG_DATASET_FAILURE } from '../reducers/types';\n\nfunction createPostAPI(data) {\n  return axios.post('/api/blog/createPost', data);\n}\n\nfunction* createPost(action) {\n  try {\n    const result = yield call(createPostAPI, action.payload);\n    yield put({\n      type: CREATE_BLOG_POST_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: CREATE_BLOG_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/blog/blogs', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.payload);\n    let noMore = false;\n\n    if (result.data.blogs.length % 6 || result.data.blogs.length === 0) {\n      noMore = true;\n    }\n\n    yield put({\n      type: LOAD_BLOG_POSTS_SUCCESS,\n      payload: result.data,\n      noMorePosts: noMore\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_BLOG_POSTS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  console.log();\n  return axios.get(`/api/blog/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.payload);\n    yield put({\n      type: LOAD_BLOG_POST_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_BLOG_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction uploadDatasetAPI(data) {\n  return axios.post(`/api/blog/uploadDataset`, data.formData, data.config);\n}\n\nfunction* uploadDataset(action) {\n  try {\n    const result = yield call(uploadDatasetAPI, action.payload);\n    yield put({\n      type: UPLOAD_BLOG_DATASET_SUCCESS,\n      payload: _objectSpread(_objectSpread({}, result.data), {}, {\n        file: action.payload.file,\n        dataType: action.payload.dataType\n      })\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UPLOAD_BLOG_DATASET_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchCreatePost() {\n  yield takeLatest(CREATE_BLOG_POST_REQUEST, createPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest([LOAD_BLOG_POSTS_REQUEST, RESET_LOAD_BLOG_POSTS], loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_BLOG_POST_REQUEST, loadPost);\n}\n\nfunction* watchUploadDataset() {\n  yield takeLatest(UPLOAD_BLOG_DATASET_REQUEST, uploadDataset);\n}\n\nexport default function* blogSaga() {\n  yield all([fork(watchCreatePost), fork(watchLoadPosts), fork(watchLoadPost), fork(watchUploadDataset)]);\n}","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/sagas/blog.js"],"names":["all","fork","put","call","takeLatest","axios","CREATE_BLOG_POST_REQUEST","CREATE_BLOG_POST_SUCCESS","CREATE_BLOG_POST_FAILURE","LOAD_BLOG_POSTS_REQUEST","LOAD_BLOG_POSTS_SUCCESS","LOAD_BLOG_POSTS_FAILURE","RESET_LOAD_BLOG_POSTS","LOAD_BLOG_POST_REQUEST","LOAD_BLOG_POST_SUCCESS","LOAD_BLOG_POST_FAILURE","UPLOAD_BLOG_DATASET_REQUEST","UPLOAD_BLOG_DATASET_SUCCESS","UPLOAD_BLOG_DATASET_FAILURE","createPostAPI","data","post","createPost","action","result","payload","type","error","console","response","loadPostsAPI","loadPosts","noMore","blogs","length","noMorePosts","loadPostAPI","log","get","loadPost","uploadDatasetAPI","formData","config","uploadDataset","file","dataType","watchCreatePost","watchLoadPosts","watchLoadPost","watchUploadDataset","blogSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, call, takeLatest } from 'redux-saga/effects'\nimport axios from 'axios';\n\nimport {\n  CREATE_BLOG_POST_REQUEST, CREATE_BLOG_POST_SUCCESS, CREATE_BLOG_POST_FAILURE,\n  LOAD_BLOG_POSTS_REQUEST, LOAD_BLOG_POSTS_SUCCESS, LOAD_BLOG_POSTS_FAILURE,\n  RESET_LOAD_BLOG_POSTS,\n  LOAD_BLOG_POST_REQUEST, LOAD_BLOG_POST_SUCCESS, LOAD_BLOG_POST_FAILURE,\n  UPLOAD_BLOG_DATASET_REQUEST, UPLOAD_BLOG_DATASET_SUCCESS, UPLOAD_BLOG_DATASET_FAILURE,\n} from '../reducers/types'\n\nfunction createPostAPI(data) {\n  return axios.post('/api/blog/createPost', data)\n}\n\nfunction* createPost(action) {\n  try {\n    const result = yield call(createPostAPI, action.payload);\n    yield put({\n      type: CREATE_BLOG_POST_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: CREATE_BLOG_POST_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/blog/blogs', data)\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.payload);\n    let noMore = false;\n    if (result.data.blogs.length % 6 || result.data.blogs.length === 0) {\n      noMore = true;\n    }\n    yield put({\n      type: LOAD_BLOG_POSTS_SUCCESS,\n      payload: result.data,\n      noMorePosts: noMore,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_BLOG_POSTS_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction loadPostAPI(data) {\n  console.log()\n  return axios.get(`/api/blog/${data}`)\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.payload);\n    yield put({\n      type: LOAD_BLOG_POST_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_BLOG_POST_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction uploadDatasetAPI(data) {\n  return axios.post(`/api/blog/uploadDataset`, data.formData, data.config)\n}\n\nfunction* uploadDataset(action) {\n  try {\n    const result = yield call(uploadDatasetAPI, action.payload);\n    yield put({\n      type: UPLOAD_BLOG_DATASET_SUCCESS,\n      payload: {\n        ...result.data,\n        file: action.payload.file,\n        dataType: action.payload.dataType,\n      },\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: UPLOAD_BLOG_DATASET_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction* watchCreatePost() {\n  yield takeLatest(CREATE_BLOG_POST_REQUEST, createPost)\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest([LOAD_BLOG_POSTS_REQUEST, RESET_LOAD_BLOG_POSTS], loadPosts)\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_BLOG_POST_REQUEST, loadPost)\n}\n\nfunction* watchUploadDataset() {\n  yield takeLatest(UPLOAD_BLOG_DATASET_REQUEST, uploadDataset)\n}\n\n\nexport default function* blogSaga() {\n  yield all([\n    fork(watchCreatePost),\n    fork(watchLoadPosts),\n    fork(watchLoadPost),\n    fork(watchUploadDataset),\n  ])\n}"]},"metadata":{},"sourceType":"module"}