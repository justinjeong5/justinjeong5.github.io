{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { Skeleton } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport { LOAD_COMMENTS_REQUEST } from '../../../reducers/types';\nimport CommentForm from './CommentForm';\nimport SingleComment from './SingleComment';\nimport ReplyComment from './ReplyComment';\n\nfunction Comment(props) {\n  const dispatch = useDispatch();\n  const {\n    commentList,\n    loadCommentsLoading,\n    loadCommentsDone\n  } = useSelector(state => state.comment);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_COMMENTS_REQUEST,\n      payload: props.payload\n    });\n  }, []);\n  const renderSkeleton = Array.from(Array(3)).map(_ => /*#__PURE__*/_jsx(Skeleton, {\n    avatar: true\n  }, uuidv4()));\n  const renderComment = commentList.map(comment => {\n    if (!comment.responseTo) return /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        margin: '20px 0'\n      },\n      children: [/*#__PURE__*/_jsx(SingleComment, {\n        payload: props.payload,\n        description: props.description,\n        comment: comment\n      }), /*#__PURE__*/_jsx(ReplyComment, {\n        payload: props.payload,\n        description: props.description,\n        comment: comment\n      })]\n    }, uuidv4());\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [loadCommentsLoading && renderSkeleton, loadCommentsDone && renderComment, /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(CommentForm, {\n      disabled: props.disabled,\n      payload: props.payload,\n      description: props.description,\n      placeholder: props.placeholder\n    }), /*#__PURE__*/_jsx(\"br\", {})]\n  });\n}\n\nexport default Comment;","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/components/utils/Comment/Comment.js"],"names":["React","useEffect","useSelector","useDispatch","Skeleton","v4","uuidv4","LOAD_COMMENTS_REQUEST","CommentForm","SingleComment","ReplyComment","Comment","props","dispatch","commentList","loadCommentsLoading","loadCommentsDone","state","comment","type","payload","renderSkeleton","Array","from","map","_","renderComment","responseTo","margin","description","disabled","placeholder"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAEtB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA,WAAF;AAAeC,IAAAA,mBAAf;AAAoCC,IAAAA;AAApC,MAAyDd,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,OAAhB,CAA1E;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEZ,qBADC;AAEPa,MAAAA,OAAO,EAAER,KAAK,CAACQ;AAFR,KAAD,CAAR;AAID,GALQ,EAKN,EALM,CAAT;AAOA,QAAMC,cAAc,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,CAAD,CAAhB,EAAqBE,GAArB,CAAyBC,CAAC,iBAAI,KAAC,QAAD;AAAyB,IAAA,MAAM;AAA/B,KAAenB,MAAM,EAArB,CAA9B,CAAvB;AAEA,QAAMoB,aAAa,GAAGZ,WAAW,CAACU,GAAZ,CAAgBN,OAAO,IAAI;AAC/C,QAAI,CAACA,OAAO,CAACS,UAAb,EACE,oBACE;AAAoB,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAA3B;AAAA,8BACE,KAAC,aAAD;AAAe,QAAA,OAAO,EAAEhB,KAAK,CAACQ,OAA9B;AAAuC,QAAA,WAAW,EAAER,KAAK,CAACiB,WAA1D;AAAuE,QAAA,OAAO,EAAEX;AAAhF,QADF,eAEE,KAAC,YAAD;AAAc,QAAA,OAAO,EAAEN,KAAK,CAACQ,OAA7B;AAAsC,QAAA,WAAW,EAAER,KAAK,CAACiB,WAAzD;AAAsE,QAAA,OAAO,EAAEX;AAA/E,QAFF;AAAA,OAAUZ,MAAM,EAAhB,CADF;AAMH,GARqB,CAAtB;AAUA,sBACE;AAAA,eACGS,mBAAmB,IAAIM,cAD1B,EAEGL,gBAAgB,IAAIU,aAFvB,eAGE,cAHF,eAIE,KAAC,WAAD;AAAa,MAAA,QAAQ,EAAEd,KAAK,CAACkB,QAA7B;AAAuC,MAAA,OAAO,EAAElB,KAAK,CAACQ,OAAtD;AAA+D,MAAA,WAAW,EAAER,KAAK,CAACiB,WAAlF;AAA+F,MAAA,WAAW,EAAEjB,KAAK,CAACmB;AAAlH,MAJF,eAKE,cALF;AAAA,IADF;AASD;;AAED,eAAepB,OAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux'\nimport { Skeleton } from 'antd'\nimport { v4 as uuidv4 } from 'uuid'\nimport { LOAD_COMMENTS_REQUEST } from '../../../reducers/types'\nimport CommentForm from './CommentForm'\nimport SingleComment from './SingleComment'\nimport ReplyComment from './ReplyComment';\n\nfunction Comment(props) {\n\n  const dispatch = useDispatch();\n  const { commentList, loadCommentsLoading, loadCommentsDone } = useSelector(state => state.comment)\n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_COMMENTS_REQUEST,\n      payload: props.payload\n    })\n  }, [])\n\n  const renderSkeleton = Array.from(Array(3)).map(_ => <Skeleton key={uuidv4()} avatar />)\n\n  const renderComment = commentList.map(comment => {\n    if (!comment.responseTo)\n      return (\n        <div key={uuidv4()} style={{ margin: '20px 0' }}>\n          <SingleComment payload={props.payload} description={props.description} comment={comment} />\n          <ReplyComment payload={props.payload} description={props.description} comment={comment} />\n        </div>\n      )\n  })\n\n  return (\n    <div>\n      {loadCommentsLoading && renderSkeleton}\n      {loadCommentsDone && renderComment}\n      <br />\n      <CommentForm disabled={props.disabled} payload={props.payload} description={props.description} placeholder={props.placeholder} />\n      <br />\n    </div>\n  )\n}\n\nexport default Comment\n"]},"metadata":{},"sourceType":"module"}