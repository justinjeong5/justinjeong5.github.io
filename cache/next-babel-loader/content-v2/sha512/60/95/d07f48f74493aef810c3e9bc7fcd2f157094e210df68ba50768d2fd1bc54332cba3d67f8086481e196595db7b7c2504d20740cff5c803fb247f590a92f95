{"ast":null,"code":"import { all, fork, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE, LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER_REQUEST, LOGOUT_USER_SUCCESS, LOGOUT_USER_FAILURE, AUTHENTICATE_USER_REQUEST, AUTHENTICATE_USER_SUCCESS, AUTHENTICATE_USER_FAILURE, EDIT_USER_REQUEST, EDIT_USER_SUCCESS, EDIT_USER_FAILURE, CONFIRM_USER_REQUEST, CONFIRM_USER_SUCCESS, CONFIRM_USER_FAILURE, UPLOAD_USER_IMAGE_REQUEST, UPLOAD_USER_IMAGE_SUCCESS, UPLOAD_USER_IMAGE_FAILURE } from '../reducers/types';\n\nfunction registerAPI(data) {\n  return axios.post('/api/user/register', data);\n}\n\nfunction* register(action) {\n  try {\n    const result = yield call(registerAPI, action.payload);\n    yield put({\n      type: REGISTER_USER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REGISTER_USER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loginAPI(data) {\n  return axios.post('/api/user/login', data);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.payload);\n    yield put({\n      type: LOGIN_USER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOGIN_USER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.get('/api/user/logout');\n}\n\nfunction* logout() {\n  try {\n    const result = yield call(logoutAPI);\n    yield put({\n      type: LOGOUT_USER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOGOUT_USER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction authenticateAPI() {\n  return axios.get('/api/user/auth');\n}\n\nfunction* authenticate() {\n  try {\n    const result = yield call(authenticateAPI);\n    yield put({\n      type: AUTHENTICATE_USER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: AUTHENTICATE_USER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction confirmAPI(data) {\n  return axios.post('/api/user/confirm', data);\n}\n\nfunction* confirm(action) {\n  try {\n    const result = yield call(confirmAPI, action.payload);\n    yield put({\n      type: CONFIRM_USER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: CONFIRM_USER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction editAPI(data) {\n  return axios.post('/api/user/edit', data);\n}\n\nfunction* edit(action) {\n  try {\n    const result = yield call(editAPI, action.payload);\n    yield put({\n      type: EDIT_USER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: EDIT_USER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction uploadUserImageAPI(data) {\n  return axios.post('/api/user/editImage', data.formData, data.config);\n}\n\nfunction* uploadUserImage(action) {\n  try {\n    const result = yield call(uploadUserImageAPI, action.payload);\n    yield put({\n      type: UPLOAD_USER_IMAGE_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UPLOAD_USER_IMAGE_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchRegister() {\n  yield takeLatest(REGISTER_USER_REQUEST, register);\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_USER_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOGOUT_USER_REQUEST, logout);\n}\n\nfunction* watchAuthenticate() {\n  yield takeLatest(AUTHENTICATE_USER_REQUEST, authenticate);\n}\n\nfunction* watchConfirm() {\n  yield takeLatest(CONFIRM_USER_REQUEST, confirm);\n}\n\nfunction* watchEdit() {\n  yield takeLatest(EDIT_USER_REQUEST, edit);\n}\n\nfunction* watchUploadUserImage() {\n  yield takeLatest(UPLOAD_USER_IMAGE_REQUEST, uploadUserImage);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchRegister), fork(watchLogin), fork(watchLogout), fork(watchAuthenticate), fork(watchEdit), fork(watchConfirm), fork(watchUploadUserImage)]);\n}","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/sagas/user.js"],"names":["all","fork","put","call","takeLatest","axios","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER_REQUEST","LOGOUT_USER_SUCCESS","LOGOUT_USER_FAILURE","AUTHENTICATE_USER_REQUEST","AUTHENTICATE_USER_SUCCESS","AUTHENTICATE_USER_FAILURE","EDIT_USER_REQUEST","EDIT_USER_SUCCESS","EDIT_USER_FAILURE","CONFIRM_USER_REQUEST","CONFIRM_USER_SUCCESS","CONFIRM_USER_FAILURE","UPLOAD_USER_IMAGE_REQUEST","UPLOAD_USER_IMAGE_SUCCESS","UPLOAD_USER_IMAGE_FAILURE","registerAPI","data","post","register","action","result","payload","type","error","console","response","loginAPI","login","logoutAPI","get","logout","authenticateAPI","authenticate","confirmAPI","confirm","editAPI","edit","uploadUserImageAPI","formData","config","uploadUserImage","watchRegister","watchLogin","watchLogout","watchAuthenticate","watchConfirm","watchEdit","watchUploadUserImage","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, call, takeLatest } from 'redux-saga/effects'\nimport axios from 'axios';\n\nimport {\n  REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE,\n  LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE,\n  LOGOUT_USER_REQUEST, LOGOUT_USER_SUCCESS, LOGOUT_USER_FAILURE,\n  AUTHENTICATE_USER_REQUEST, AUTHENTICATE_USER_SUCCESS, AUTHENTICATE_USER_FAILURE,\n  EDIT_USER_REQUEST, EDIT_USER_SUCCESS, EDIT_USER_FAILURE,\n  CONFIRM_USER_REQUEST, CONFIRM_USER_SUCCESS, CONFIRM_USER_FAILURE,\n  UPLOAD_USER_IMAGE_REQUEST, UPLOAD_USER_IMAGE_SUCCESS, UPLOAD_USER_IMAGE_FAILURE,\n} from '../reducers/types'\n\nfunction registerAPI(data) {\n  return axios.post('/api/user/register', data)\n}\n\nfunction* register(action) {\n  try {\n    const result = yield call(registerAPI, action.payload);\n    yield put({\n      type: REGISTER_USER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: REGISTER_USER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction loginAPI(data) {\n  return axios.post('/api/user/login', data)\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.payload);\n    yield put({\n      type: LOGIN_USER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOGIN_USER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction logoutAPI() {\n  return axios.get('/api/user/logout')\n}\n\nfunction* logout() {\n  try {\n    const result = yield call(logoutAPI);\n    yield put({\n      type: LOGOUT_USER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOGOUT_USER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction authenticateAPI() {\n  return axios.get('/api/user/auth')\n}\n\nfunction* authenticate() {\n  try {\n    const result = yield call(authenticateAPI);\n    yield put({\n      type: AUTHENTICATE_USER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: AUTHENTICATE_USER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction confirmAPI(data) {\n  return axios.post('/api/user/confirm', data)\n}\n\nfunction* confirm(action) {\n  try {\n    const result = yield call(confirmAPI, action.payload);\n    yield put({\n      type: CONFIRM_USER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: CONFIRM_USER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction editAPI(data) {\n  return axios.post('/api/user/edit', data)\n}\n\nfunction* edit(action) {\n  try {\n    const result = yield call(editAPI, action.payload);\n    yield put({\n      type: EDIT_USER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: EDIT_USER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction uploadUserImageAPI(data) {\n  return axios.post('/api/user/editImage', data.formData, data.config)\n}\n\nfunction* uploadUserImage(action) {\n  try {\n    const result = yield call(uploadUserImageAPI, action.payload);\n    yield put({\n      type: UPLOAD_USER_IMAGE_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: UPLOAD_USER_IMAGE_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction* watchRegister() {\n  yield takeLatest(REGISTER_USER_REQUEST, register)\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_USER_REQUEST, login)\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOGOUT_USER_REQUEST, logout)\n}\n\nfunction* watchAuthenticate() {\n  yield takeLatest(AUTHENTICATE_USER_REQUEST, authenticate)\n}\n\nfunction* watchConfirm() {\n  yield takeLatest(CONFIRM_USER_REQUEST, confirm)\n}\n\nfunction* watchEdit() {\n  yield takeLatest(EDIT_USER_REQUEST, edit)\n}\n\nfunction* watchUploadUserImage() {\n  yield takeLatest(UPLOAD_USER_IMAGE_REQUEST, uploadUserImage)\n}\n\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchRegister),\n    fork(watchLogin),\n    fork(watchLogout),\n    fork(watchAuthenticate),\n    fork(watchEdit),\n    fork(watchConfirm),\n    fork(watchUploadUserImage),\n  ])\n}"]},"metadata":{},"sourceType":"module"}