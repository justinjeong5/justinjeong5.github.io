{"ast":null,"code":"import produce from 'immer';\nimport { SOCKET_CONNECT, SOCKET_DISCONNECT, SOCKET_SUBSCRIBE_SUCCESS, SOCKET_SUBSCRIBE_FAILURE, LOAD_CHATS_REQUEST, LOAD_CHATS_SUCCESS, LOAD_CHATS_FAILURE, LOAD_CHAT_ROOMS_REQUEST, LOAD_CHAT_ROOMS_SUCCESS, LOAD_CHAT_ROOMS_FAILURE, CREATE_CHAT_ROOM_SUCCESS, CREATE_CHAT_ROOM_FAILURE, SET_CURRENT_CHAT_ROOM, LOAD_CHAT_USERS_REQUEST, LOAD_CHAT_USERS_SUCCESS, LOAD_CHAT_USERS_FAILURE, SET_CURRENT_DIRECT_ROOM } from './types';\nconst initialState = {\n  chatList: [],\n  chatRooms: [],\n  chatUsers: [],\n  currentChatRoom: {},\n  readCounts: [],\n  message: '',\n  socketConnected: null,\n  socketError: null,\n  socketSubscribe: null,\n  loadChatsLoading: false,\n  loadChatsDone: false,\n  loadChatsError: null,\n  loadChatRoomsLoading: false,\n  loadChatRoomsDone: false,\n  loadChatRoomsError: null,\n  createChatRoomLoading: false,\n  createChatRoomDone: false,\n  createChatRoomError: null,\n  loadChatUsersLoading: false,\n  loadChatUsersDone: false,\n  loadChatUsersError: null\n};\n\nconst chat = (state = initialState, action) => {\n  return produce(state, draft => {\n    var _action$payload$chatR, _action$payload$users;\n\n    switch (action.type) {\n      case SOCKET_CONNECT:\n        draft.socketConnected = true;\n        draft.socketError = null;\n        draft.loadChatsLoading = false;\n        draft.loadChatsDone = false;\n        draft.loadChatsError = null;\n        break;\n\n      case SOCKET_DISCONNECT:\n        draft.socketConnected = false;\n        draft.socketError = null;\n        draft.loadChatsLoading = false;\n        draft.loadChatsDone = false;\n        draft.loadChatsError = null;\n        break;\n\n      case SOCKET_SUBSCRIBE_SUCCESS:\n        draft.socketSubscribe = true;\n\n        if (action.payload.chat.chatRoom === draft.currentChatRoom._id || action.payload.chat.directRoom === draft.currentChatRoom._id) {\n          draft.chatList.push(action.payload.chat);\n        }\n\n        draft.message = action.payload.message;\n        break;\n\n      case SOCKET_SUBSCRIBE_FAILURE:\n        draft.socketSubscribe = false;\n        draft.socketError = action.error.code;\n        draft.message = action.error.message;\n        break;\n\n      case LOAD_CHATS_REQUEST:\n        draft.loadChatsLoading = true;\n        draft.loadChatsDone = false;\n        draft.loadChatsError = null;\n        break;\n\n      case LOAD_CHATS_SUCCESS:\n        draft.loadChatsLoading = false;\n        draft.loadChatsDone = true;\n        draft.chatList = action.payload.chats;\n        draft.message = action.payload.message;\n        break;\n\n      case LOAD_CHATS_FAILURE:\n        draft.loadChatsLoading = false;\n        draft.loadChatsError = action.error.code;\n        draft.message = action.error.message;\n        break;\n\n      case LOAD_CHAT_ROOMS_REQUEST:\n        draft.loadChatRoomsLoading = true;\n        draft.loadChatRoomsDone = false;\n        draft.loadChatRoomsError = null;\n        break;\n\n      case LOAD_CHAT_ROOMS_SUCCESS:\n        draft.loadChatRoomsLoading = false;\n        draft.loadChatRoomsDone = true;\n        draft.chatRooms = action.payload.chatRooms;\n        draft.currentChatRoom = (_action$payload$chatR = action.payload.chatRooms) === null || _action$payload$chatR === void 0 ? void 0 : _action$payload$chatR[0];\n        draft.message = action.payload.message;\n        break;\n\n      case LOAD_CHAT_ROOMS_FAILURE:\n        draft.loadChatRoomsLoading = false;\n        draft.loadChatRoomsError = action.error.code;\n        draft.message = action.error.message;\n        break;\n\n      case CREATE_CHAT_ROOM_SUCCESS:\n        draft.createChatRoomLoading = false;\n        draft.createChatRoomDone = true;\n        draft.chatRooms.push(action.payload.chatRoom);\n        draft.message = action.payload.message;\n        break;\n\n      case CREATE_CHAT_ROOM_FAILURE:\n        draft.createChatRoomLoading = false;\n        draft.createChatRoomError = action.error.code;\n        draft.message = action.error.message;\n        break;\n\n      case SET_CURRENT_CHAT_ROOM:\n        const room = draft.chatRooms.filter(room => {\n          return room._id === action.payload;\n        })[0];\n        draft.currentChatRoom = room;\n        draft.message = 'currentChatRoom 정보를 정상적으로 변경했습니다.';\n        break;\n\n      case LOAD_CHAT_USERS_REQUEST:\n        draft.loadChatUsersLoading = true;\n        draft.loadChatUsersDone = false;\n        draft.loadChatUsersError = null;\n        break;\n\n      case LOAD_CHAT_USERS_SUCCESS:\n        draft.loadChatUsersLoading = false;\n        draft.loadChatUsersDone = true;\n        const users = (_action$payload$users = action.payload.users) === null || _action$payload$users === void 0 ? void 0 : _action$payload$users.filter(user => user._id !== action.payload.userId);\n\n        const getDirectRoomId = user => {\n          if (user._id > action.payload.userId) {\n            return `${user._id}/${action.payload.userId}`;\n          }\n\n          return `${action.payload.userId}/${user._id}`;\n        };\n\n        draft.chatUsers = users === null || users === void 0 ? void 0 : users.map(user => {\n          user.directRoom = getDirectRoomId(user);\n          return user;\n        });\n        draft.message = action.payload.message;\n        break;\n\n      case LOAD_CHAT_USERS_FAILURE:\n        draft.loadChatUsersLoading = false;\n        draft.loadChatUsersError = action.error.code;\n        draft.message = action.error.message;\n        break;\n\n      case SET_CURRENT_DIRECT_ROOM:\n        const directUser = draft.chatUsers.filter(user => user.directRoom === action.payload)[0];\n        draft.currentChatRoom = {\n          private: true,\n          favorite: false,\n          _id: directUser.directRoom,\n          title: directUser.name,\n          description: `${directUser.name}님에게 안부를 물어보세요.`,\n          writer: directUser\n        };\n        draft.message = 'currentChatRoom 정보를 정상적으로 변경했습니다.';\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default chat;","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/reducers/chat.js"],"names":["produce","SOCKET_CONNECT","SOCKET_DISCONNECT","SOCKET_SUBSCRIBE_SUCCESS","SOCKET_SUBSCRIBE_FAILURE","LOAD_CHATS_REQUEST","LOAD_CHATS_SUCCESS","LOAD_CHATS_FAILURE","LOAD_CHAT_ROOMS_REQUEST","LOAD_CHAT_ROOMS_SUCCESS","LOAD_CHAT_ROOMS_FAILURE","CREATE_CHAT_ROOM_SUCCESS","CREATE_CHAT_ROOM_FAILURE","SET_CURRENT_CHAT_ROOM","LOAD_CHAT_USERS_REQUEST","LOAD_CHAT_USERS_SUCCESS","LOAD_CHAT_USERS_FAILURE","SET_CURRENT_DIRECT_ROOM","initialState","chatList","chatRooms","chatUsers","currentChatRoom","readCounts","message","socketConnected","socketError","socketSubscribe","loadChatsLoading","loadChatsDone","loadChatsError","loadChatRoomsLoading","loadChatRoomsDone","loadChatRoomsError","createChatRoomLoading","createChatRoomDone","createChatRoomError","loadChatUsersLoading","loadChatUsersDone","loadChatUsersError","chat","state","action","draft","type","payload","chatRoom","_id","directRoom","push","error","code","chats","room","filter","users","user","userId","getDirectRoomId","map","directUser","private","favorite","title","name","description","writer"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nimport {\n  SOCKET_CONNECT, SOCKET_DISCONNECT,\n  SOCKET_SUBSCRIBE_SUCCESS, SOCKET_SUBSCRIBE_FAILURE,\n  LOAD_CHATS_REQUEST, LOAD_CHATS_SUCCESS, LOAD_CHATS_FAILURE,\n  LOAD_CHAT_ROOMS_REQUEST, LOAD_CHAT_ROOMS_SUCCESS, LOAD_CHAT_ROOMS_FAILURE,\n  CREATE_CHAT_ROOM_SUCCESS, CREATE_CHAT_ROOM_FAILURE,\n  SET_CURRENT_CHAT_ROOM,\n  LOAD_CHAT_USERS_REQUEST, LOAD_CHAT_USERS_SUCCESS, LOAD_CHAT_USERS_FAILURE,\n  SET_CURRENT_DIRECT_ROOM,\n} from './types'\n\nconst initialState = {\n  chatList: [],\n  chatRooms: [],\n  chatUsers: [],\n  currentChatRoom: {},\n  readCounts: [],\n  message: '',\n\n  socketConnected: null,\n  socketError: null,\n  socketSubscribe: null,\n  loadChatsLoading: false,\n  loadChatsDone: false,\n  loadChatsError: null,\n  loadChatRoomsLoading: false,\n  loadChatRoomsDone: false,\n  loadChatRoomsError: null,\n  createChatRoomLoading: false,\n  createChatRoomDone: false,\n  createChatRoomError: null,\n  loadChatUsersLoading: false,\n  loadChatUsersDone: false,\n  loadChatUsersError: null,\n}\n\nconst chat = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case SOCKET_CONNECT:\n        draft.socketConnected = true;\n        draft.socketError = null;\n        draft.loadChatsLoading = false;\n        draft.loadChatsDone = false;\n        draft.loadChatsError = null;\n        break;\n      case SOCKET_DISCONNECT:\n        draft.socketConnected = false;\n        draft.socketError = null;\n        draft.loadChatsLoading = false;\n        draft.loadChatsDone = false;\n        draft.loadChatsError = null;\n        break;\n      case SOCKET_SUBSCRIBE_SUCCESS:\n        draft.socketSubscribe = true;\n        if (action.payload.chat.chatRoom === draft.currentChatRoom._id\n          || action.payload.chat.directRoom === draft.currentChatRoom._id) {\n          draft.chatList.push(action.payload.chat);\n        }\n        draft.message = action.payload.message;\n        break;\n      case SOCKET_SUBSCRIBE_FAILURE:\n        draft.socketSubscribe = false;\n        draft.socketError = action.error.code;\n        draft.message = action.error.message;\n        break;\n      case LOAD_CHATS_REQUEST:\n        draft.loadChatsLoading = true;\n        draft.loadChatsDone = false;\n        draft.loadChatsError = null;\n        break;\n      case LOAD_CHATS_SUCCESS:\n        draft.loadChatsLoading = false;\n        draft.loadChatsDone = true;\n        draft.chatList = action.payload.chats;\n        draft.message = action.payload.message;\n        break;\n      case LOAD_CHATS_FAILURE:\n        draft.loadChatsLoading = false;\n        draft.loadChatsError = action.error.code;\n        draft.message = action.error.message;\n        break;\n      case LOAD_CHAT_ROOMS_REQUEST:\n        draft.loadChatRoomsLoading = true;\n        draft.loadChatRoomsDone = false;\n        draft.loadChatRoomsError = null;\n        break;\n      case LOAD_CHAT_ROOMS_SUCCESS:\n        draft.loadChatRoomsLoading = false;\n        draft.loadChatRoomsDone = true;\n        draft.chatRooms = action.payload.chatRooms;\n        draft.currentChatRoom = action.payload.chatRooms?.[0];\n        draft.message = action.payload.message;\n        break;\n      case LOAD_CHAT_ROOMS_FAILURE:\n        draft.loadChatRoomsLoading = false;\n        draft.loadChatRoomsError = action.error.code;\n        draft.message = action.error.message;\n        break;\n      case CREATE_CHAT_ROOM_SUCCESS:\n        draft.createChatRoomLoading = false;\n        draft.createChatRoomDone = true;\n        draft.chatRooms.push(action.payload.chatRoom);\n        draft.message = action.payload.message;\n        break;\n      case CREATE_CHAT_ROOM_FAILURE:\n        draft.createChatRoomLoading = false;\n        draft.createChatRoomError = action.error.code;\n        draft.message = action.error.message;\n        break;\n      case SET_CURRENT_CHAT_ROOM:\n        const room = draft.chatRooms.filter(room => {\n          return room._id === action.payload;\n        })[0]\n        draft.currentChatRoom = room;\n        draft.message = 'currentChatRoom 정보를 정상적으로 변경했습니다.';\n        break;\n      case LOAD_CHAT_USERS_REQUEST:\n        draft.loadChatUsersLoading = true;\n        draft.loadChatUsersDone = false;\n        draft.loadChatUsersError = null;\n        break;\n      case LOAD_CHAT_USERS_SUCCESS:\n        draft.loadChatUsersLoading = false;\n        draft.loadChatUsersDone = true;\n        const users = action.payload.users?.filter(user => (user._id !== action.payload.userId));\n        const getDirectRoomId = (user) => {\n          if (user._id > action.payload.userId) {\n            return `${user._id}/${action.payload.userId}`\n          }\n          return `${action.payload.userId}/${user._id}`\n        }\n        draft.chatUsers = users?.map(user => {\n          user.directRoom = getDirectRoomId(user)\n          return user;\n        });\n        draft.message = action.payload.message;\n        break;\n      case LOAD_CHAT_USERS_FAILURE:\n        draft.loadChatUsersLoading = false;\n        draft.loadChatUsersError = action.error.code;\n        draft.message = action.error.message;\n        break;\n      case SET_CURRENT_DIRECT_ROOM:\n        const directUser = draft.chatUsers.filter(user => (user.directRoom === action.payload))[0];\n        draft.currentChatRoom = {\n          private: true,\n          favorite: false,\n          _id: directUser.directRoom,\n          title: directUser.name,\n          description: `${directUser.name}님에게 안부를 물어보세요.`,\n          writer: directUser,\n        };\n        draft.message = 'currentChatRoom 정보를 정상적으로 변경했습니다.';\n        break;\n      default:\n        break;\n    }\n  });\n}\n\nexport default chat;"]},"metadata":{},"sourceType":"module"}