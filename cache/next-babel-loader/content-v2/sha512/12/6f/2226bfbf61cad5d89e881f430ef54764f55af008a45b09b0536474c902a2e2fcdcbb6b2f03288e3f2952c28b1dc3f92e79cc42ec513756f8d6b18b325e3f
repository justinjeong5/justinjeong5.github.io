{"ast":null,"code":"import { all, fork, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { API_URL, API_KEY } from '../config/key';\nimport { LOAD_MOVIES_REQUEST, LOAD_MOVIES_SUCCESS, LOAD_MOVIES_FAILURE, LOAD_MOVIE_DETAIL_REQUEST, LOAD_MOVIE_DETAIL_SUCCESS, LOAD_MOVIE_DETAIL_FAILURE, LOAD_MOVIE_TRAILER_REQUEST, LOAD_MOVIE_TRAILER_SUCCESS, LOAD_MOVIE_TRAILER_FAILURE, LOAD_MOVIE_CASTING_REQUEST, LOAD_MOVIE_CASTING_SUCCESS, LOAD_MOVIE_CASTING_FAILURE } from '../reducers/types';\n\nfunction LoadMoviesAPI(data) {\n  return axios.get(`${API_URL}/movie/popular?api_key=${API_KEY}&language=ko-KR&page=${data}`, {\n    withCredentials: false\n  });\n}\n\n_c = LoadMoviesAPI;\n\nfunction* loadMovies(action) {\n  try {\n    const result = yield call(LoadMoviesAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIES_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIES_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction LoadMovieDetailAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}?api_key=${API_KEY}&language=ko-KR`, {\n    withCredentials: false\n  });\n}\n\n_c2 = LoadMovieDetailAPI;\n\nfunction* loadMovieDetail(action) {\n  try {\n    const result = yield call(LoadMovieDetailAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_DETAIL_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIE_DETAIL_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction LoadMovieTrailerAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/videos?api_key=${API_KEY}`, {\n    withCredentials: false\n  });\n}\n\n_c3 = LoadMovieTrailerAPI;\n\nfunction* loadMovieTrailer(action) {\n  try {\n    const result = yield call(LoadMovieTrailerAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_TRAILER_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIE_TRAILER_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction LoadMovieCastingAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/credits?api_key=${API_KEY}`, {\n    withCredentials: false\n  });\n}\n\n_c4 = LoadMovieCastingAPI;\n\nfunction* loadMovieCasting(action) {\n  try {\n    const result = yield call(LoadMovieCastingAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_CASTING_SUCCESS,\n      payload: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOAD_MOVIE_CASTING_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadMovies() {\n  yield takeLatest(LOAD_MOVIES_REQUEST, loadMovies);\n}\n\nfunction* watchLoadMovieDetail() {\n  yield takeLatest(LOAD_MOVIE_DETAIL_REQUEST, loadMovieDetail);\n}\n\nfunction* watchLoadMovieTrailer() {\n  yield takeLatest(LOAD_MOVIE_TRAILER_REQUEST, loadMovieTrailer);\n}\n\nfunction* watchLoadMovieCasting() {\n  yield takeLatest(LOAD_MOVIE_CASTING_REQUEST, loadMovieCasting);\n}\n\nexport default function* movieSaga() {\n  yield all([fork(watchLoadMovies), fork(watchLoadMovieDetail), fork(watchLoadMovieTrailer), fork(watchLoadMovieCasting)]);\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"LoadMoviesAPI\");\n$RefreshReg$(_c2, \"LoadMovieDetailAPI\");\n$RefreshReg$(_c3, \"LoadMovieTrailerAPI\");\n$RefreshReg$(_c4, \"LoadMovieCastingAPI\");","map":{"version":3,"sources":["/Users/justinjeong/Github/javascript/githubIo/client/sagas/movie.js"],"names":["all","fork","put","call","takeLatest","axios","API_URL","API_KEY","LOAD_MOVIES_REQUEST","LOAD_MOVIES_SUCCESS","LOAD_MOVIES_FAILURE","LOAD_MOVIE_DETAIL_REQUEST","LOAD_MOVIE_DETAIL_SUCCESS","LOAD_MOVIE_DETAIL_FAILURE","LOAD_MOVIE_TRAILER_REQUEST","LOAD_MOVIE_TRAILER_SUCCESS","LOAD_MOVIE_TRAILER_FAILURE","LOAD_MOVIE_CASTING_REQUEST","LOAD_MOVIE_CASTING_SUCCESS","LOAD_MOVIE_CASTING_FAILURE","LoadMoviesAPI","data","get","withCredentials","loadMovies","action","result","payload","type","error","console","response","LoadMovieDetailAPI","loadMovieDetail","LoadMovieTrailerAPI","loadMovieTrailer","LoadMovieCastingAPI","loadMovieCasting","watchLoadMovies","watchLoadMovieDetail","watchLoadMovieTrailer","watchLoadMovieCasting","movieSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,eAAjC;AAEA,SACEC,mBADF,EACuBC,mBADvB,EAC4CC,mBAD5C,EAEEC,yBAFF,EAE6BC,yBAF7B,EAEwDC,yBAFxD,EAGEC,0BAHF,EAG8BC,0BAH9B,EAG0DC,0BAH1D,EAIEC,0BAJF,EAI8BC,0BAJ9B,EAI0DC,0BAJ1D,QAKO,mBALP;;AAOA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOhB,KAAK,CAACiB,GAAN,CAAW,GAAEhB,OAAQ,0BAAyBC,OAAQ,wBAAuBc,IAAK,EAAlF,EAAqF;AAAEE,IAAAA,eAAe,EAAE;AAAnB,GAArF,CAAP;AACD;;KAFQH,a;;AAIT,UAAUI,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAACiB,aAAD,EAAgBK,MAAM,CAACE,OAAvB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEnB,mBADE;AAERkB,MAAAA,OAAO,EAAED,MAAM,CAACL;AAFR,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAM3B,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAElB,mBADE;AAERmB,MAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeV;AAFd,KAAD,CAAT;AAID;AACF;;AAED,SAASW,kBAAT,CAA4BX,IAA5B,EAAkC;AAChC,SAAOhB,KAAK,CAACiB,GAAN,CAAW,GAAEhB,OAAQ,UAASe,IAAK,YAAWd,OAAQ,iBAAtD,EAAwE;AAAEgB,IAAAA,eAAe,EAAE;AAAnB,GAAxE,CAAP;AACD;;MAFQS,kB;;AAIT,UAAUC,eAAV,CAA0BR,MAA1B,EAAkC;AAChC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAAC6B,kBAAD,EAAqBP,MAAM,CAACE,OAA5B,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEhB,yBADE;AAERe,MAAAA,OAAO,EAAED,MAAM,CAACL;AAFR,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAM3B,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEf,yBADE;AAERgB,MAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeV;AAFd,KAAD,CAAT;AAID;AACF;;AAED,SAASa,mBAAT,CAA6Bb,IAA7B,EAAmC;AACjC,SAAOhB,KAAK,CAACiB,GAAN,CAAW,GAAEhB,OAAQ,UAASe,IAAK,mBAAkBd,OAAQ,EAA7D,EAAgE;AAAEgB,IAAAA,eAAe,EAAE;AAAnB,GAAhE,CAAP;AACD;;MAFQW,mB;;AAIT,UAAUC,gBAAV,CAA2BV,MAA3B,EAAmC;AACjC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAAC+B,mBAAD,EAAsBT,MAAM,CAACE,OAA7B,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEb,0BADE;AAERY,MAAAA,OAAO,EAAED,MAAM,CAACL;AAFR,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAM3B,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEZ,0BADE;AAERa,MAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeV;AAFd,KAAD,CAAT;AAID;AACF;;AAED,SAASe,mBAAT,CAA6Bf,IAA7B,EAAmC;AACjC,SAAOhB,KAAK,CAACiB,GAAN,CAAW,GAAEhB,OAAQ,UAASe,IAAK,oBAAmBd,OAAQ,EAA9D,EAAiE;AAAEgB,IAAAA,eAAe,EAAE;AAAnB,GAAjE,CAAP;AACD;;MAFQa,mB;;AAIT,UAAUC,gBAAV,CAA2BZ,MAA3B,EAAmC;AACjC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAACiC,mBAAD,EAAsBX,MAAM,CAACE,OAA7B,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEV,0BADE;AAERS,MAAAA,OAAO,EAAED,MAAM,CAACL;AAFR,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAM3B,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAET,0BADE;AAERU,MAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeV;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUiB,eAAV,GAA4B;AAC1B,QAAMlC,UAAU,CAACI,mBAAD,EAAsBgB,UAAtB,CAAhB;AACD;;AAED,UAAUe,oBAAV,GAAiC;AAC/B,QAAMnC,UAAU,CAACO,yBAAD,EAA4BsB,eAA5B,CAAhB;AACD;;AAED,UAAUO,qBAAV,GAAkC;AAChC,QAAMpC,UAAU,CAACU,0BAAD,EAA6BqB,gBAA7B,CAAhB;AACD;;AAED,UAAUM,qBAAV,GAAkC;AAChC,QAAMrC,UAAU,CAACa,0BAAD,EAA6BoB,gBAA7B,CAAhB;AACD;;AAGD,eAAe,UAAUK,SAAV,GAAsB;AACnC,QAAM1C,GAAG,CAAC,CACRC,IAAI,CAACqC,eAAD,CADI,EAERrC,IAAI,CAACsC,oBAAD,CAFI,EAGRtC,IAAI,CAACuC,qBAAD,CAHI,EAIRvC,IAAI,CAACwC,qBAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { all, fork, put, call, takeLatest } from 'redux-saga/effects'\nimport axios from 'axios';\nimport { API_URL, API_KEY } from '../config/key'\n\nimport {\n  LOAD_MOVIES_REQUEST, LOAD_MOVIES_SUCCESS, LOAD_MOVIES_FAILURE,\n  LOAD_MOVIE_DETAIL_REQUEST, LOAD_MOVIE_DETAIL_SUCCESS, LOAD_MOVIE_DETAIL_FAILURE,\n  LOAD_MOVIE_TRAILER_REQUEST, LOAD_MOVIE_TRAILER_SUCCESS, LOAD_MOVIE_TRAILER_FAILURE,\n  LOAD_MOVIE_CASTING_REQUEST, LOAD_MOVIE_CASTING_SUCCESS, LOAD_MOVIE_CASTING_FAILURE,\n} from '../reducers/types'\n\nfunction LoadMoviesAPI(data) {\n  return axios.get(`${API_URL}/movie/popular?api_key=${API_KEY}&language=ko-KR&page=${data}`, { withCredentials: false })\n}\n\nfunction* loadMovies(action) {\n  try {\n    const result = yield call(LoadMoviesAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIES_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIES_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction LoadMovieDetailAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}?api_key=${API_KEY}&language=ko-KR`, { withCredentials: false })\n}\n\nfunction* loadMovieDetail(action) {\n  try {\n    const result = yield call(LoadMovieDetailAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_DETAIL_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIE_DETAIL_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction LoadMovieTrailerAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/videos?api_key=${API_KEY}`, { withCredentials: false })\n}\n\nfunction* loadMovieTrailer(action) {\n  try {\n    const result = yield call(LoadMovieTrailerAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_TRAILER_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIE_TRAILER_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction LoadMovieCastingAPI(data) {\n  return axios.get(`${API_URL}/movie/${data}/credits?api_key=${API_KEY}`, { withCredentials: false })\n}\n\nfunction* loadMovieCasting(action) {\n  try {\n    const result = yield call(LoadMovieCastingAPI, action.payload);\n    yield put({\n      type: LOAD_MOVIE_CASTING_SUCCESS,\n      payload: result.data,\n    })\n  } catch (error) {\n    console.error(error)\n    yield put({\n      type: LOAD_MOVIE_CASTING_FAILURE,\n      error: error.response.data,\n    })\n  }\n}\n\nfunction* watchLoadMovies() {\n  yield takeLatest(LOAD_MOVIES_REQUEST, loadMovies)\n}\n\nfunction* watchLoadMovieDetail() {\n  yield takeLatest(LOAD_MOVIE_DETAIL_REQUEST, loadMovieDetail)\n}\n\nfunction* watchLoadMovieTrailer() {\n  yield takeLatest(LOAD_MOVIE_TRAILER_REQUEST, loadMovieTrailer)\n}\n\nfunction* watchLoadMovieCasting() {\n  yield takeLatest(LOAD_MOVIE_CASTING_REQUEST, loadMovieCasting)\n}\n\n\nexport default function* movieSaga() {\n  yield all([\n    fork(watchLoadMovies),\n    fork(watchLoadMovieDetail),\n    fork(watchLoadMovieTrailer),\n    fork(watchLoadMovieCasting),\n  ])\n}"]},"metadata":{},"sourceType":"module"}